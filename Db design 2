CREATE PROCEDURE GetChores (
    @Id INT,          -- Mandatory Id parameter
    @Type CHAR(1) = 'C' -- 'C' for Chore, 'P' for Parent, 'CH' for Child
)
AS
BEGIN
    IF @Type = 'C'  -- Get chore by ChoreId
    BEGIN
        SELECT 
            c.Id AS ChoreId,
            c.Title AS ChoreTitle,
            c.Description AS ChoreDescription,
            c.Reward AS ChoreReward,
            c.DueDate AS ChoreDueDate,
            c.CompletionDate AS ChoreCompletionDate,
            c.Status AS ChoreStatus,
            c.Frequency AS ChoreFrequency,
            c.Category AS ChoreCategory,
            c.CreatedAt AS ChoreCreatedAt,
            c.CreatedBy AS ChoreCreatedBy,
            com.Id AS CommentId,
            com.Comment AS CommentText,
            com.CreatedAt AS CommentCreatedAt,
            u.Name AS CommentCreatedBy,
            a.Id AS AttachmentId,
            a.Type AS AttachmentType
        FROM Chores c
        LEFT JOIN Comments com ON c.Id = com.ChoreId
        LEFT JOIN Attachments a ON com.AttachmentId = a.Id
        LEFT JOIN Users u ON com.CreatedBy = u.Id
        WHERE c.Id = @Id
        ORDER BY c.Id, com.CreatedAt;
    END
    ELSE IF @Type = 'P' -- Get chores by ParentId
    BEGIN
        SELECT 
            c.Id AS ChoreId,
            c.Title AS ChoreTitle,
            c.Description AS ChoreDescription,
            c.Reward AS ChoreReward,
            c.DueDate AS ChoreDueDate,
            c.CompletionDate AS ChoreCompletionDate,
            c.Status AS ChoreStatus,
            c.Frequency AS ChoreFrequency,
            c.Category AS ChoreCategory,
            c.CreatedAt AS ChoreCreatedAt,
            c.CreatedBy AS ChoreCreatedBy,
            com.Id AS CommentId,
            com.Comment AS CommentText,
            com.CreatedAt AS CommentCreatedAt,
            u.Name AS CommentCreatedBy,
            a.Id AS AttachmentId,
            a.Type AS AttachmentType
        FROM Chores c
        LEFT JOIN Comments com ON c.Id = com.ChoreId
        LEFT JOIN Attachments a ON com.AttachmentId = a.Id
        LEFT JOIN Users u ON com.CreatedBy = u.Id
        WHERE c.ParentId = @Id
        ORDER BY c.Id, com.CreatedAt;
    END
    ELSE IF @Type = 'CH' -- Get chores by ChildId
    BEGIN
        SELECT 
            c.Id AS ChoreId,
            c.Title AS ChoreTitle,
            c.Description AS ChoreDescription,
            c.Reward AS ChoreReward,
            c.DueDate AS ChoreDueDate,
            c.CompletionDate AS ChoreCompletionDate,
            c.Status AS ChoreStatus,
            c.Frequency AS ChoreFrequency,
            c.Category AS ChoreCategory,
            c.CreatedAt AS ChoreCreatedAt,
            c.CreatedBy AS ChoreCreatedBy,
            com.Id AS CommentId,
            com.Comment AS CommentText,
            com.CreatedAt AS CommentCreatedAt,
            u.Name AS CommentCreatedBy,
            a.Id AS AttachmentId,
            a.Type AS AttachmentType
        FROM Chores c
        LEFT JOIN Comments com ON c.Id = com.ChoreId
        LEFT JOIN Attachments a ON com.AttachmentId = a.Id
        LEFT JOIN Users u ON com.CreatedBy = u.Id
        WHERE c.ChildId = @Id
        ORDER BY c.Id, com.CreatedAt;
    END
END;


// 1. Models (ChoreWithCommentsAndAttachments.cs)
public class ChoreWithCommentsAndAttachments
{
    public int ChoreId { get; set; }
    public string ChoreTitle { get; set; }
    public string ChoreDescription { get; set; }
    public int? ChoreReward { get; set; }
    public DateTime? ChoreDueDate { get; set; }
    public DateTime? ChoreCompletionDate { get; set; }
    public string ChoreStatus { get; set; }
    public string ChoreFrequency { get; set; }
    public string ChoreCategory { get; set; }
    public DateTime? ChoreCreatedAt { get; set; }
    public int? ChoreCreatedBy { get; set; }

    public List<Comment> Comments { get; set; } = new List<Comment>();
    public List<Attachment> Attachments { get; set; } = new List<Attachment>();

    public class Comment
    {
        public int CommentId { get; set; }
        public string CommentText { get; set; }
        public DateTime? CommentCreatedAt { get; set; }
        public string CommentCreatedBy { get; set; }
    }

    public class Attachment
    {
        public int AttachmentId { get; set; }
        public string AttachmentType { get; set; }
        public byte[] AttachmentContent { get; set; } 
    }
}

// 2. Interface (IChoreRepository.cs)
public interface IChoreRepository
{
    Task<ChoreWithCommentsAndAttachments> GetChoreAsync(int id, char type);
}

// 3. Repository (ChoreRepository.cs)
public class ChoreRepository : IChoreRepository
{
    private readonly string _connectionString;
    private readonly ILogger<ChoreRepository> _logger;

    public ChoreRepository(IConfiguration configuration, ILogger<ChoreRepository> logger)
    {
        _connectionString = configuration.GetConnectionString("YourDatabaseConnection");
        _logger = logger;
    }

    public async Task<ChoreWithCommentsAndAttachments> GetChoreAsync(int id, char type)
    {
        ChoreWithCommentsAndAttachments chore = null;

        using (SqlConnection connection = new SqlConnection(_connectionString))
        using (SqlCommand command = new SqlCommand("GetChores", connection))
        {
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.AddWithValue("@Id", id);
            command.Parameters.AddWithValue("@Type", type);

            try
            {
                await connection.OpenAsync();
                using (SqlDataReader reader = await command.ExecuteReaderAsync())
                {
                    while (await reader.ReadAsync())
                    {
                        if (chore == null)
                        {
                            chore = new ChoreWithCommentsAndAttachments
                            {
                                ChoreId = reader.GetInt32("ChoreId"),
                                ChoreTitle = reader.IsDBNull("ChoreTitle") ? null : reader.GetString("ChoreTitle"),
                                ChoreDescription = reader.IsDBNull("ChoreDescription") ? null : reader.GetString("ChoreDescription"),
                                ChoreReward = reader.IsDBNull("ChoreReward") ? null : (int?)reader.GetInt32("ChoreReward"),
                                ChoreDueDate = reader.IsDBNull("ChoreDueDate") ? null : (DateTime?)reader.GetDateTime("ChoreDueDate"),
                                ChoreCompletionDate = reader.IsDBNull("ChoreCompletionDate") ? null : (DateTime?)reader.GetDateTime("ChoreCompletionDate"),
                                ChoreStatus = reader.IsDBNull("ChoreStatus") ? null : reader.GetString("ChoreStatus"),
                                ChoreFrequency = reader.IsDBNull("ChoreFrequency") ? null : reader.GetString("ChoreFrequency"),
                                ChoreCategory = reader.IsDBNull("ChoreCategory") ? null : reader.GetString("ChoreCategory"),
                                ChoreCreatedAt = reader.IsDBNull("ChoreCreatedAt") ? null : reader.GetDateTime("ChoreCreatedAt"),
                                ChoreCreatedBy = reader.IsDBNull("ChoreCreatedBy") ? null : (int?)reader.GetInt32("ChoreCreatedBy")
                            };
                        }

                        if (!reader.IsDBNull("CommentId"))
                        {
                            chore.Comments.Add(new ChoreWithCommentsAndAttachments.Comment
                            {
                                CommentId = reader.GetInt32("CommentId"),
                                CommentText = reader.IsDBNull("CommentText") ? null : reader.GetString("CommentText"),
                                CommentCreatedAt = reader.IsDBNull("CommentCreatedAt") ? null : reader.GetDateTime("CommentCreatedAt"),
                                CommentCreatedBy = reader.IsDBNull("CommentCreatedBy") ? null : reader.GetString("CommentCreatedBy")
                            });
                        }

                        if (!reader.IsDBNull("AttachmentId"))
                        {
                            chore.Attachments.Add(new ChoreWithCommentsAndAttachments.Attachment
                            {
                                AttachmentId = reader.GetInt32("AttachmentId"),
                                AttachmentType = reader.IsDBNull("AttachmentType") ? null : reader.GetString("AttachmentType"),
                                AttachmentContent = reader.IsDBNull("AttachmentContent") ? null : reader.GetSqlBytes("AttachmentContent").Value
                            });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in GetChoreAsync: Id={Id}, Type={Type}", id, type);
                throw;
            }
        }

        return chore;
    }
}

// 4. Interface (IChoreService.cs)
public interface IChoreService
{
    Task<ChoreWithCommentsAndAttachments> GetChoreAsync(int id, char type);
}

// 5. Service (ChoreService.cs)
public class ChoreService : IChoreService
{
    private readonly IChoreRepository _choreRepository;

    public ChoreService(IChoreRepository choreRepository)
    {
        _choreRepository = choreRepository;
    }

    public async Task<ChoreWithCommentsAndAttachments> GetChoreAsync(int id, char type)
    {
        return await _choreRepository.GetChoreAsync(id, type);
    }
}

// 6. Controller (ChoreController.cs)
[ApiController]
[Route("api/[controller]")]
public class ChoreController : ControllerBase
{
    private readonly IChoreService _choreService;

    public ChoreController(IChoreService choreService)
    {
        _choreService = choreService;
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> GetChore(int id, [FromQuery] char type = 'C')
    {
        var chore = await _choreService.GetChoreAsync(id, type);
        if (chore == null)
        {
            return NotFound();
        }
        return Ok(chore);
    }
}

// 7. Startup.cs (or Program.cs in .NET 6+)
public void ConfigureServices(IServiceCollection services)
{
    services.AddControllers();
    services.AddTransient<IChoreRepository, ChoreRepository>();
    services.AddTransient<IChoreService, ChoreService>();

    services.AddDbContext<YourDbContext>(options =>
        options.UseSqlServer(Configuration.GetConnectionString("YourDatabaseConnection"))); // Replace YourDbContext

    services.AddLogging(builder =>
    {
        builder.AddConsole(); // Or your preferred logging provider
    });
}

// .NET 6+ Program.cs
var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllers();
builder.Services.AddTransient<IChoreRepository, ChoreRepository>();
builder.Services.AddTransient<IChoreService, ChoreService>();

builder.Services.AddDbContext<YourDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("YourDatabaseConnection"))); // Replace YourDbContext

builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

builder.Logging.AddConsole(); // Or your preferred logging provider

var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();
app.Run();

-- Stored Procedure (ManageChore.sql)
CREATE PROCEDURE ManageChore (
    @ChoreId INT,          -- 0 for new chore, existing Id for update
    @ParentId INT = NULL,
    @ChildId INT = NULL,
    @Title VARCHAR(255) = NULL,
    @Description TEXT = NULL,
    @Reward INT = NULL,
    @DueDate DATETIME = NULL,
    @Category VARCHAR(255) = NULL,
    @CommentText TEXT = NULL,
    @AttachmentType VARCHAR(255) = NULL,
    @AttachmentContent VARBINARY(MAX) = NULL,
    @Status VARCHAR(50) = NULL,
    @CreatedBy INT = NULL  -- Mandatory CreatedBy
)
AS
BEGIN
    IF @ChoreId = 0  -- Create New Chore
    BEGIN
        INSERT INTO Chores (ParentId, ChildId, Title, Description, Reward, DueDate, Category, CreatedBy, CreatedAt, Status)
        VALUES (@ParentId, @ChildId, @Title, @Description, @Reward, @DueDate, @Category, @CreatedBy, GETDATE(), 'Pending'); --Default status

        SELECT SCOPE_IDENTITY(); -- Return the new ChoreId
    END
    ELSE  -- Update Existing Chore
    BEGIN
        -- Update Chore Details (Parent Updates)
        IF @ParentId IS NOT NULL
        BEGIN
            UPDATE Chores
            SET
                Title = ISNULL(@Title, Title),
                Description = ISNULL(@Description, Description),
                Reward = ISNULL(@Reward, Reward),
                ChildId = ISNULL(@ChildId, ChildId),
                DueDate = ISNULL(@DueDate, DueDate),
                Category = ISNULL(@Category, Category)
            WHERE Id = @ChoreId AND ParentId = @ParentId;
        END

        -- Child Completion
        IF @ChildId IS NOT NULL AND @Status IS NOT NULL
        BEGIN
            UPDATE Chores
            SET Status = @Status, CompletionDate = GETDATE()
            WHERE Id = @ChoreId AND ChildId = @ChildId;
        END

        -- Add Comment and Attachment (Both Parent and Child)
        IF @CommentText IS NOT NULL
        BEGIN
            -- Insert Comment (Initially without AttachmentId)
            INSERT INTO Comments (ChoreId, Comment, CreatedBy, CreatedAt, AttachmentId)
            VALUES (@ChoreId, @CommentText, @CreatedBy, GETDATE(), NULL);

            DECLARE @CommentId INT;
            SELECT @CommentId = SCOPE_IDENTITY();

            -- Insert Attachment and Update Comment (if attachment provided)
            IF @AttachmentContent IS NOT NULL
            BEGIN
                INSERT INTO Attachments (CommentId, Type, Attachment)
                VALUES (@CommentId, @AttachmentType, @AttachmentContent);

                DECLARE @AttachmentId INT;
                SELECT @AttachmentId = SCOPE_IDENTITY();

                UPDATE Comments
                SET AttachmentId = @AttachmentId
                WHERE Id = @CommentId;
            END
        END

        SELECT @ChoreId; -- Return the existing ChoreId (for update confirmation)
    END
END;

// 1. Models (ChoreModel.cs)
public class ChoreModel
{
    public int? ParentId { get; set; }
    public int? ChildId { get; set; }
    public string Title { get; set; }
    public string Description { get; set; }
    public int? Reward { get; set; }
    public DateTime? DueDate { get; set; }
    public string Category { get; set; }
    public string CommentText { get; set; }
    public IFormFile Attachment { get; set; }
    public string Status { get; set; }
}

// 2. Interface (IChoreRepository.cs)
public interface IChoreRepository
{
    Task<int> ManageChoreAsync(int choreId, ChoreModel model, int createdBy);
}

// 3. Repository (ChoreRepository.cs)
public class ChoreRepository : IChoreRepository
{
    private readonly string _connectionString;
    private readonly ILogger<ChoreRepository> _logger;

    public ChoreRepository(IConfiguration configuration, ILogger<ChoreRepository> logger)
    {
        _connectionString = configuration.GetConnectionString("YourDatabaseConnection");
        _logger = logger;
    }

    public async Task<int> ManageChoreAsync(int choreId, ChoreModel model, int createdBy)
    {
        using (SqlConnection connection = new SqlConnection(_connectionString))
        using (SqlCommand command = new SqlCommand("ManageChore", connection))
        {
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.AddWithValue("@ChoreId", choreId);
            command.Parameters.AddWithValue("@ParentId", model.ParentId ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@ChildId", model.ChildId ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@Title", model.Title ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@Description", model.Description ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@Reward", model.Reward ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@DueDate", model.DueDate ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@Category", model.Category ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@CommentText", model.CommentText ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@AttachmentType", model.Attachment?.ContentType ?? (object)DBNull.Value); // Handle null
            command.Parameters.AddWithValue("@AttachmentContent", model.Attachment?.OpenReadStream()?.ToByteArray() ?? (object)DBNull.Value); // Handle null
            command.Parameters.AddWithValue("@Status", model.Status ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@CreatedBy", createdBy);

            try
            {
                await connection.OpenAsync();
                object result = await command.ExecuteScalarAsync();
                return Convert.ToInt32(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error managing chore: {ChoreId}", choreId);
                throw;
            }
        }
    }
}

// 4. Interface (IChoreService.cs)
public interface IChoreService
{
    Task<int> ManageChoreAsync(int choreId, ChoreModel model, int createdBy);
}

// 5. Service (ChoreService.cs)
public class ChoreService : IChoreService
{
    private readonly IChoreRepository _choreRepository;

    public ChoreService(IChoreRepository choreRepository)
    {
        _choreRepository = choreRepository;
    }

    public async Task<int> ManageChoreAsync(int choreId, ChoreModel model, int createdBy)
    {
        byte[] attachmentContent = null;
        string attachmentType = null;

        if (model.Attachment != null)
        {
            using (var stream = model.Attachment.OpenReadStream())
            using (var memoryStream = new MemoryStream())
            {
                stream.CopyTo(memoryStream);
                attachmentContent = memoryStream.ToArray();
                attachmentType = model.Attachment.ContentType;
            }
        }

        return await _choreRepository.ManageChoreAsync(choreId, model, createdBy);
    }
}

// 6. Controller (ChoreController.cs)
[ApiController]
[Route("api/[controller]")]
public class ChoreController : ControllerBase
{
    private readonly IChoreService _choreService;

    public ChoreController(IChoreService choreService)
    {
        _choreService = choreService;
    }

    [HttpPost]
    public async Task<IActionResult> CreateChore([FromForm] ChoreModel model)
    {
        var userId = GetUserId();
        if (userId == null)
        {
            return Unauthorized();
        }

        int newChoreId = await _choreService.ManageChoreAsync(0, model, userId.Value);
        return CreatedAtAction(nameof(GetChore), new { id = newChoreId }, null);
    }

    [HttpPut("{choreId}")]
    public async Task<IActionResult> UpdateChore(int choreId, [FromForm] ChoreModel model)
    {
        var userId = GetUserId();
        if (userId == null)
        {
            return Unauthorized();
        }

        int updatedChoreId = await _choreService.ManageChoreAsync(choreId, model, userId.Value);
        if (updatedChoreId > 0)
        {
            return NoContent();
        }
        return BadRequest();
    }

    private int? GetUserId()
    {
        if (User.Identity.IsAuthenticated)


// 6. Controller (ChoreController.cs)
[ApiController]
[Route("api/[controller]")]
public class ChoreController : ControllerBase
{
    private readonly IChoreService _choreService;

    public ChoreController(IChoreService choreService)
    {
        _choreService = choreService;
    }

    [HttpPost] // Use POST for BOTH create and update
    public async Task<IActionResult> ManageChore([FromForm] ChoreModel model, [FromQuery] int choreId = 0) // choreId in query string
    {
        var userId = GetUserId();
        if (userId == null)
        {
            return Unauthorized();
        }

        int managedChoreId = await _choreService.ManageChoreAsync(choreId, model, userId.Value); // Pass choreId

        if (choreId == 0) // Check if it was a create operation
        {
            return CreatedAtAction(nameof(GetChore), new { id = managedChoreId }, null); // 201 Created
        }
        else // It was an update
        {
            return NoContent(); // 204 No Content
        }
    }

    // ... (GetUserId method - same as before)
}
public async Task<int> ManageChoreAsync(int choreId, ChoreModel model, int createdBy)
{
    using (SqlConnection connection = new SqlConnection(_connectionString))
    using (SqlCommand command = new SqlCommand("ManageChore", connection))
    {
        command.CommandType = CommandType.StoredProcedure;
        command.Parameters.AddWithValue("@ChoreId", choreId);

        // Handle NULLs correctly
        if (model.ParentId.HasValue)
        {
            command.Parameters.AddWithValue("@ParentId", model.ParentId.Value);
        }
        else
        {
            command.Parameters.AddWithValue("@ParentId", DBNull.Value);
        }

        if (model.ChildId.HasValue)
        {
            command.Parameters.AddWithValue("@ChildId", model.ChildId.Value);
        }
        else
        {
            command.Parameters.AddWithValue("@ChildId", DBNull.Value);
        }

        command.Parameters.AddWithValue("@Title", model.Title ?? (object)DBNull.Value);
        command.Parameters.AddWithValue("@Description", model.Description ?? (object)DBNull.Value);
        command.Parameters.AddWithValue("@Reward", model.Reward ?? (object)DBNull.Value);
        command.Parameters.AddWithValue("@DueDate", model.DueDate ?? (object)DBNull.Value);
        command.Parameters.AddWithValue("@Category", model.Category ?? (object)DBNull.Value);
        command.Parameters.AddWithValue("@CommentText", model.CommentText ?? (object)DBNull.Value);

        // Handle attachment parameters more carefully
        if (model.Attachment != null) // Check for null IFormFile
        {
            command.Parameters.AddWithValue("@AttachmentType", model.Attachment.ContentType);
            // Convert to byte array only if the stream is not null
            using (var stream = model.Attachment.OpenReadStream())
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                command.Parameters.AddWithValue("@AttachmentContent", memoryStream.ToArray());
            }
        }
        else
        {
            command.Parameters.AddWithValue("@AttachmentType", DBNull.Value);
            command.Parameters.AddWithValue("@AttachmentContent", DBNull.Value);
        }

        command.Parameters.AddWithValue("@Status", model.Status ?? (object)DBNull.Value);
        command.Parameters.AddWithValue("@CreatedBy", createdBy);

        try
        {
            await connection.OpenAsync();
            object result = await command.ExecuteScalarAsync();
            return Convert.ToInt32(result);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error managing chore: {ChoreId}", choreId);
            throw;
        }
    }
}
