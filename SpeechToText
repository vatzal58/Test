import React, { useState, useEffect, useRef } from 'react';

const SpeechToText = () => {
  const [isListening, setIsListening] = useState(false);
  const [transcript, setTranscript] = useState('');
  const [isSending, setIsSending] = useState(false);
  const [feedbackMessage, setFeedbackMessage] = useState('');
  const recognitionRef = useRef(null);

  useEffect(() => {
    // Check if browser supports the Web Speech API
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
      setFeedbackMessage('Speech recognition is not supported in your browser.');
      return;
    }

    // Initialize speech recognition
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    recognitionRef.current = new SpeechRecognition();
    recognitionRef.current.continuous = true;
    recognitionRef.current.interimResults = true;
    recognitionRef.current.lang = 'en-US'; // Set language (can be made configurable)

    recognitionRef.current.onresult = (event) => {
      const currentTranscript = Array.from(event.results)
        .map(result => result[0].transcript)
        .join('');
      
      setTranscript(currentTranscript);
    };

    recognitionRef.current.onerror = (event) => {
      console.error('Speech recognition error:', event.error);
      setFeedbackMessage(`Error: ${event.error}`);
      setIsListening(false);
    };

    recognitionRef.current.onend = () => {
      // Only set isListening to false if we didn't intend to keep listening
      if (isListening) {
        recognitionRef.current.start();
      }
    };

    return () => {
      // Cleanup
      if (recognitionRef.current) {
        recognitionRef.current.stop();
      }
    };
  }, [isListening]);

  const toggleListening = () => {
    if (isListening) {
      recognitionRef.current.stop();
      setIsListening(false);
      setFeedbackMessage('Stopped listening.');
    } else {
      setTranscript('');
      recognitionRef.current.start();
      setIsListening(true);
      setFeedbackMessage('Listening...');
    }
  };

  const sendToAPI = async () => {
    if (!transcript.trim()) {
      setFeedbackMessage('Nothing to send. Please record some speech first.');
      return;
    }

    setIsSending(true);
    setFeedbackMessage('Sending to API...');

    try {
      const response = await fetch('https://your-api-endpoint.com/speech', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          // Add any auth headers if needed
          // 'Authorization': 'Bearer YOUR_TOKEN'
        },
        body: JSON.stringify({ text: transcript })
      });

      if (!response.ok) {
        throw new Error(`API responded with status: ${response.status}`);
      }

      const data = await response.json();
      setFeedbackMessage('Successfully sent to API!');
      console.log('API response:', data);
      
      // Optional: Clear transcript after successful send
      // setTranscript('');
    } catch (error) {
      console.error('Error sending to API:', error);
      setFeedbackMessage(`Failed to send: ${error.message}`);
    } finally {
      setIsSending(false);
    }
  };

  return (
    <div className="speech-to-text-container">
      <h2>Speech to Text Converter</h2>
      
      <div className="controls">
        <button 
          onClick={toggleListening}
          disabled={isSending}
          className={isListening ? 'stop-button' : 'start-button'}
        >
          {isListening ? 'Stop Recording' : 'Start Recording'}
        </button>
        
        <button 
          onClick={sendToAPI}
          disabled={isSending || !transcript.trim() || isListening}
          className="send-button"
        >
          {isSending ? 'Sending...' : 'Send to API'}
        </button>
      </div>
      
      <div className="feedback-message">
        {feedbackMessage}
      </div>
      
      <div className="transcript-container">
        <h3>Transcript:</h3>
        <div className="transcript">
          {transcript || 'Start speaking to see transcription here...'}
        </div>
      </div>
      
      <style jsx>{`
        .speech-to-text-container {
          max-width: 600px;
          margin: 0 auto;
          padding: 20px;
          border: 1px solid #ddd;
          border-radius: 8px;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .controls {
          display: flex;
          gap: 10px;
          margin-bottom: 20px;
        }
        
        button {
          padding: 10px 15px;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          font-weight: bold;
        }
        
        button:disabled {
          opacity: 0.6;
          cursor: not-allowed;
        }
        
        .start-button {
          background-color: #4CAF50;
          color: white;
        }
        
        .stop-button {
          background-color: #f44336;
          color: white;
        }
        
        .send-button {
          background-color: #2196F3;
          color: white;
        }
        
        .feedback-message {
          margin: 10px 0;
          padding: 8px;
          color: #555;
          font-style: italic;
        }
        
        .transcript-container {
          margin-top: 20px;
          border-top: 1px solid #eee;
          padding-top: 10px;
        }
        
        .transcript {
          min-height: 100px;
          padding: 10px;
          border: 1px solid #ddd;
          border-radius: 4px;
          background-color: #f9f9f9;
          white-space: pre-wrap;
        }
      `}</style>
    </div>
  );
};

export default SpeechToText;
