// File: /ui/shareduireact/auth/authService.ts
import { UserManager, UserManagerSettings, User } from 'oidc-client-ts';

// OIDC Configuration
const oidcConfig: UserManagerSettings = {
  authority: 'https://your-identity-provider.com', // Replace with your identity provider URL
  client_id: 'your-client-id', // Replace with your client ID
  redirect_uri: `${window.location.origin}/ui/shareduireact/callback`,
  post_logout_redirect_uri: `${window.location.origin}/ui/shareduireact`,
  response_type: 'code',
  scope: 'openid profile email', // Adjust scopes as needed
  automaticSilentRenew: true,
  silent_redirect_uri: `${window.location.origin}/ui/shareduireact/silent-callback`,
};

// Create a singleton instance of UserManager
class AuthService {
  private userManager: UserManager;
  private targetPath: string | null = null;

  constructor() {
    this.userManager = new UserManager(oidcConfig);
    this.setupEvents();
  }

  private setupEvents() {
    this.userManager.events.addUserLoaded((user) => {
      console.log('User loaded:', user);
    });

    this.userManager.events.addSilentRenewError((error) => {
      console.error('Silent renew error:', error);
    });
  }

  public isAuthenticated = async (): Promise<boolean> => {
    try {
      const user = await this.userManager.getUser();
      return !!user && !user.expired;
    } catch (error) {
      console.error('Error checking authentication status:', error);
      return false;
    }
  };

  public getUser = async (): Promise<User | null> => {
    return await this.userManager.getUser();
  };

  public login = async (targetPath?: string): Promise<void> => {
    // Store the target path in the service instance
    if (targetPath) {
      this.targetPath = targetPath;
    }
    
    // Pass the target path as state to be returned after authentication
    await this.userManager.signinRedirect({ 
      state: this.targetPath || '/ui/shareduireact/app1'
    });
  };

  public handleLoginCallback = async (): Promise<string> => {
    try {
      const user = await this.userManager.signinRedirectCallback();
      // The state parameter contains our redirect path
      return (user.state as string) || '/ui/shareduireact/app1';
    } catch (error) {
      console.error('Error handling login callback:', error);
      return '/ui/shareduireact';
    }
  };

  public logout = async (): Promise<void> => {
    try {
      await this.userManager.signoutRedirect();
    } catch (error) {
      console.error('Error during logout:', error);
    }
  };

  public silentRenew = async (): Promise<User | null> => {
    try {
      return await this.userManager.signinSilent();
    } catch (error) {
      console.error('Error during silent renew:', error);
      return null;
    }
  };

  public handleSilentRenew = async (): Promise<void> => {
    try {
      await this.userManager.signinSilentCallback();
    } catch (error) {
      console.error('Error handling silent renew callback:', error);
    }
  };

  public clearStaleState = async (): Promise<void> => {
    await this.userManager.clearStaleState();
  };
}

// Export a singleton instance
const authService = new AuthService();
export default authService;

// File: /ui/shareduireact/auth/AuthCallback.tsx
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import authService from './authService';

const AuthCallback: React.FC = () => {
  const navigate = useNavigate();
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const handleCallback = async () => {
      try {
        // Get the redirect path from the state parameter
        const redirectPath = await authService.handleLoginCallback();
        navigate(redirectPath);
      } catch (err) {
        console.error('Auth callback error:', err);
        setError('Authentication failed');
        navigate('/ui/shareduireact');
      }
    };

    handleCallback();
  }, [navigate]);

  if (error) {
    return <div>Authentication error: {error}</div>;
  }

  return <div>Processing login, please wait...</div>;
};

export default AuthCallback;

// File: /ui/shareduireact/auth/SilentCallback.tsx
import React, { useEffect } from 'react';
import authService from './authService';

const SilentCallback: React.FC = () => {
  useEffect(() => {
    authService.handleSilentRenew();
  }, []);

  return null;
};

export default SilentCallback;

// File: /ui/shareduireact/auth/withAuth.tsx
import React, { useEffect, useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import authService from './authService';

// Higher-order component to protect routes
const withAuth = <P extends object>(Component: React.ComponentType<P>): React.FC<P> => {
  return (props: P) => {
    const navigate = useNavigate();
    const location = useLocation();
    const [isAuthenticated, setIsAuthenticated] = useState<boolean | null>(null);

    useEffect(() => {
      const checkAuth = async () => {
        try {
          const authenticated = await authService.isAuthenticated();
          setIsAuthenticated(authenticated);
          
          if (!authenticated) {
            // Pass the current path to return to after login
            authService.login(location.pathname);
          }
        } catch (error) {
          console.error('Auth check error:', error);
          setIsAuthenticated(false);
        }
      };

      checkAuth();
    }, [location.pathname]);

    // Show loading while checking authentication
    if (isAuthenticated === null) {
      return <div>Checking authentication...</div>;
    }

    // If authenticated, render the protected component
    return isAuthenticated ? <Component {...props} /> : null;
  };
};

export default withAuth;

// File: /ui/shareduireact/App.tsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import AuthCallback from './auth/AuthCallback';
import SilentCallback from './auth/SilentCallback';
import withAuth from './auth/withAuth';
import App1 from './app1'; // Your app1 component
import Home from './Home'; // Your home component

// Apply authentication to components that need protection
const ProtectedApp1 = withAuth(App1);

const App: React.FC = () => {
  return (
    <Router>
      <Routes>
        {/* Public routes */}
        <Route path="/ui/shareduireact" element={<Home />} />
        <Route path="/ui/shareduireact/callback" element={<AuthCallback />} />
        <Route path="/ui/shareduireact/silent-callback" element={<SilentCallback />} />
        
        {/* Protected routes */}
        <Route path="/ui/shareduireact/app1" element={<ProtectedApp1 />} />
        
        {/* Catch-all redirect */}
        <Route path="*" element={<Navigate to="/ui/shareduireact" replace />} />
      </Routes>
    </Router>
  );
};

export default App;

// File: /ui/shareduireact/app1/index.tsx
import React, { useEffect, useState } from 'react';
import authService from '../auth/authService';
import { User } from 'oidc-client-ts';

const App1: React.FC = () => {
  const [user, setUser] = useState<User | null>(null);

  useEffect(() => {
    const loadUser = async () => {
      const currentUser = await authService.getUser();
      setUser(currentUser);
    };

    loadUser();
  }, []);

  const handleLogout = () => {
    authService.logout();
  };

  return (
    <div>
      <h1>Welcome to App1</h1>
      {user && (
        <div>
          <p>You are logged in as: {user.profile.email}</p>
          <button onClick={handleLogout}>Logout</button>
        </div>
      )}
      {/* Your App1 content here */}
    </div>
  );
};

export default App1;

// File: /ui/shareduireact/Home.tsx
import React, { useEffect, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import authService from './auth/authService';

const Home: React.FC = () => {
  const navigate = useNavigate();
  const [isAuthenticated, setIsAuthenticated] = useState<boolean | null>(null);

  useEffect(() => {
    const checkAuth = async () => {
      const authenticated = await authService.isAuthenticated();
      setIsAuthenticated(authenticated);
    };

    checkAuth();
  }, []);

  const handleLogin = () => {
    authService.login('/ui/shareduireact/app1');
  };

  const handleLogout = () => {
    authService.logout();
  };

  return (
    <div>
      <h1>Welcome to Shared UI</h1>
      
      {isAuthenticated === null ? (
        <p>Checking authentication status...</p>
      ) : isAuthenticated ? (
        <>
          <p>You are authenticated!</p>
          <Link to="/ui/shareduireact/app1">Go to App1</Link>
          <button onClick={handleLogout}>Logout</button>
        </>
      ) : (
        <>
          <p>You are not authenticated.</p>
          <button onClick={handleLogin}>Login</button>
        </>
      )}
    </div>
  );
};

export default Home;
