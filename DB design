CREATE TABLE Users (
    Id INT IDENTITY(1,1) PRIMARY KEY, -- Auto-incrementing primary key
    Name VARCHAR(255) NOT NULL,      -- User's name (required)
    Email VARCHAR(255) UNIQUE NOT NULL, -- User's email (unique and required)
    Role VARCHAR(50),                  -- User's role (e.g., 'Admin', 'User', 'Guest')
    Age INT,                           -- User's age
    DOB DATE,                          -- User's date of birth
    Gender CHAR(1),                     -- User's gender ('M', 'F', 'O' for Other)
    ParentId INT,                      -- ID of the parent user (for hierarchical relationships)
    Contact VARCHAR(20),                -- User's contact number
    RewardPoints INT DEFAULT 0,         -- User's reward points (default 0)
    FOREIGN KEY (ParentId) REFERENCES Users(Id) -- Foreign key for parent-child relationship (self-referencing)
);

INSERT INTO Users (Name, Email, Role, Age, DOB, Gender, ParentId, Contact, RewardPoints)
VALUES ('Alice Johnson', 'alice.j@example.com', 'User', 28, '1995-03-10', 'F', NULL, '555-987-6543', 200);

INSERT INTO Users (Name, Email, Role, Age, DOB, Gender, ParentId, Contact, RewardPoints)
VALUES ('Bob Williams', 'bob.w@example.com', 'Admin', 35, '1988-09-22', 'M', NULL, '555-123-7890', 150);

CREATE TABLE ChoreTemplates (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Title VARCHAR(255) NOT NULL,
    Description TEXT,
    Category VARCHAR(50)
);

-- Example Data (Predefined Chores):
INSERT INTO ChoreTemplates (Title, Description, Category) VALUES
('Wash Dishes', 'Wash and dry all dishes in the sink.', 'Cleaning'),
('Mow Lawn', 'Mow the front and back lawn.', 'Yard Work'),
('Grocery Shopping', 'Buy groceries from the list on the fridge.', 'Errands'),
('Fold Laundry', 'Fold and put away the clean laundry.', 'Cleaning'),
('Cook Dinner', 'Prepare dinner for the family.', 'Cooking'),
('Clean Bathroom', 'Clean the bathroom, including toilet, sink, and shower/tub.', 'Cleaning'),
('Dust Furniture', 'Dust all furniture in the living room and bedrooms.', 'Cleaning'),
('Take Out Trash', 'Empty all trash cans and take out the trash.', 'Household');

CREATE TABLE Chores (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Title VARCHAR(255) NOT NULL,
    Description TEXT,
    Reward INT,
    ParentId INT,  -- ID of a parent chore (for sub-tasks)
    ChildId INT,   -- ID of a child chore (for sub-tasks)
    DueDate DATE,
    CompletionDate DATE,
    Status VARCHAR(20) DEFAULT 'Pending', -- 'Pending', 'InProgress', 'Completed', 'Cancelled'
    Frequency VARCHAR(50), -- 'Daily', 'Weekly', 'Monthly', 'Once', etc.
    Category VARCHAR(50), -- 'Cleaning', 'Cooking', 'Yard Work', etc.
    CreatedAt DATETIME DEFAULT GETDATE(), -- Timestamp of chore creation
    CreatedBy INT, -- ID of the user who created the chore
    FOREIGN KEY (CreatedBy) REFERENCES Users(Id)  -- Foreign key to the Users table
);

-- Chore 1 (No parent, no child)
INSERT INTO Chores (Title, Description, Reward, DueDate, Frequency, Category, CreatedBy)
VALUES ('Grocery Shopping', 'Buy groceries for the week.', 30, '2024-03-22', 'Weekly', 'Errands', 1);

-- Chore 2 (Parent of Chore 3)
INSERT INTO Chores (Title, Description, Reward, DueDate, Frequency, Category, CreatedBy)
VALUES ('Clean the House', 'Clean all rooms of the house.', 50, '2024-03-24', 'Weekly', 'Cleaning', 2);

-- Chore 3 (Child of Chore 2)
INSERT INTO Chores (Title, Description, Reward, ParentId, DueDate, Frequency, Category, CreatedBy)
VALUES ('Clean the Bathroom', 'Clean the bathroom thoroughly.', 20, 2, '2024-03-24', 'Weekly', 'Cleaning', 2);  -- ParentId refers to the "Clean the House" chore

-- Chore 4 (No parent, no child)
INSERT INTO Chores (Title, Description, Reward, DueDate, Frequency, Category, CreatedBy)
VALUES ('Mow the Lawn', 'Mow the front and back lawn.', 40, '2024-03-23', 'Weekly', 'Yard Work', 1);

-- Chore 5 (Child of Chore 2)
INSERT INTO Chores (Title, Description, Reward, ParentId, DueDate, Frequency, Category, CreatedBy)
VALUES ('Vacuum Living Room', 'Vacuum the living room floor.', 15, 2, '2024-03-24', 'Weekly', 'Cleaning', 2); -- ParentId refers to the "Clean the House" chore

-- Chore 6 (Parent of Chore 7)
INSERT INTO Chores (Title, Description, Reward, DueDate, Frequency, Category, CreatedBy)
VALUES ('Bake a Cake', 'Bake a chocolate cake for the party.', 60, '2024-03-25', 'Once', 'Cooking', 1);

-- Chore 7 (Child of Chore 6)
INSERT INTO Chores (Title, Description, Reward, ParentId, DueDate, Frequency, Category, CreatedBy)
VALUES ('Prepare Frosting', 'Make the chocolate frosting for the cake.', 25, 6, '2024-03-25', 'Once', 'Cooking', 1); -- ParentId refers to "Bake a Cake"

CREATE TABLE Goals (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Title VARCHAR(255) NOT NULL,
    Type VARCHAR(50),  -- e.g., 'Financial', 'Personal', 'Health', 'Education'
    ChildId INT,       -- ID of a child goal (for sub-goals)
    CreatedBy INT,     -- ID of the user who created the goal
    CreatedAt DATETIME DEFAULT GETDATE(), -- Timestamp of goal creation
    Amount DECIMAL(18, 2), -- Target amount for the goal (if applicable)
    FOREIGN KEY (CreatedBy) REFERENCES Users(Id) -- Foreign key to the Users table
);


-- Goal 1 (No child goal)
INSERT INTO Goals (Title, Type, CreatedBy, Amount)
VALUES ('Save for Down Payment', 'Financial', 1, 10000.00);

-- Goal 2 (Parent of Goal 3)
INSERT INTO Goals (Title, Type, CreatedBy)
VALUES ('Improve Fitness', 'Health', 2);

-- Goal 3 (Child of Goal 2)
INSERT INTO Goals (Title, Type, ChildId, CreatedBy)
VALUES ('Run a 5K', 'Health', 2, 2);  -- ChildId refers to "Improve Fitness" goal.

-- Goal 4 (No child goal)
INSERT INTO Goals (Title, Type, CreatedBy)
VALUES ('Learn a New Language', 'Personal', 1);

-- Goal 5 (Parent of Goal 6)
INSERT INTO Goals (Title, Type, CreatedBy)
VALUES ('Complete College Degree', 'Education', 1);

-- Goal 6 (Child of Goal 5)
INSERT INTO Goals (Title, Type, CreatedBy)
VALUES ('Pass Calculus 101', 'Education', 5, 1); -- ChildId refers to "Complete College Degree" goal.

CREATE TABLE Transactions (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    ParentId INT,       -- ID of a parent transaction (for sub-transactions or related transactions)
    ChildId INT,        -- ID of a child transaction (for sub-transactions or related transactions)
    TaskId INT,         -- ID of the related task (foreign key to the Tasks table, if you have one)
    Amount DECIMAL(18, 2) NOT NULL, -- Transaction amount (required)
    Status VARCHAR(50) DEFAULT 'Pending', -- e.g., 'Pending', 'Completed', 'Failed', 'Refunded'
    CreatedAt DATETIME DEFAULT GETDATE(), -- Timestamp of transaction creation
    FOREIGN KEY (TaskId) REFERENCES Tasks(Id) -- Foreign key to the Tasks table (if applicable)
);
