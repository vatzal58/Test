CREATE TABLE Users (
    Id INT IDENTITY(1,1) PRIMARY KEY, -- Auto-incrementing primary key
    Name VARCHAR(255) NOT NULL,      -- User's name (required)
    Email VARCHAR(255) UNIQUE NOT NULL, -- User's email (unique and required)
    Role VARCHAR(50),                  -- User's role (e.g., 'Admin', 'User', 'Guest')
    Age INT,                           -- User's age
    DOB DATE,                          -- User's date of birth
    Gender CHAR(1),                     -- User's gender ('M', 'F', 'O' for Other)
    ParentId INT,                      -- ID of the parent user (for hierarchical relationships)
    Contact VARCHAR(20),                -- User's contact number
    RewardPoints INT DEFAULT 0,         -- User's reward points (default 0)
    FOREIGN KEY (ParentId) REFERENCES Users(Id) -- Foreign key for parent-child relationship (self-referencing)
);

INSERT INTO Users (Name, Email, Role, Age, DOB, Gender, ParentId, Contact, RewardPoints)
VALUES ('Alice Johnson', 'alice.j@example.com', 'User', 28, '1995-03-10', 'F', NULL, '555-987-6543', 200);

INSERT INTO Users (Name, Email, Role, Age, DOB, Gender, ParentId, Contact, RewardPoints)
VALUES ('Bob Williams', 'bob.w@example.com', 'Admin', 35, '1988-09-22', 'M', NULL, '555-123-7890', 150);

CREATE TABLE ChoreTemplates (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Title VARCHAR(255) NOT NULL,
    Description TEXT,
    Category VARCHAR(50)
);

-- Example Data (Predefined Chores):
INSERT INTO ChoreTemplates (Title, Description, Category) VALUES
('Wash Dishes', 'Wash and dry all dishes in the sink.', 'Cleaning'),
('Mow Lawn', 'Mow the front and back lawn.', 'Yard Work'),
('Grocery Shopping', 'Buy groceries from the list on the fridge.', 'Errands'),
('Fold Laundry', 'Fold and put away the clean laundry.', 'Cleaning'),
('Cook Dinner', 'Prepare dinner for the family.', 'Cooking'),
('Clean Bathroom', 'Clean the bathroom, including toilet, sink, and shower/tub.', 'Cleaning'),
('Dust Furniture', 'Dust all furniture in the living room and bedrooms.', 'Cleaning'),
('Take Out Trash', 'Empty all trash cans and take out the trash.', 'Household');

CREATE TABLE Chores (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Title VARCHAR(255) NOT NULL,
    Description TEXT,
    Reward INT,
    ParentId INT,  -- ID of a parent chore (for sub-tasks)
    ChildId INT,   -- ID of a child chore (for sub-tasks)
    DueDate DATE,
    CompletionDate DATE,
    Status VARCHAR(20) DEFAULT 'Pending', -- 'Pending', 'InProgress', 'Completed', 'Cancelled'
    Frequency VARCHAR(50), -- 'Daily', 'Weekly', 'Monthly', 'Once', etc.
    Category VARCHAR(50), -- 'Cleaning', 'Cooking', 'Yard Work', etc.
    CreatedAt DATETIME DEFAULT GETDATE(), -- Timestamp of chore creation
    CreatedBy INT, -- ID of the user who created the chore
    FOREIGN KEY (CreatedBy) REFERENCES Users(Id)  -- Foreign key to the Users table
);

-- Chore 1 (No parent, no child)
INSERT INTO Chores (Title, Description, Reward, DueDate, Frequency, Category, CreatedBy)
VALUES ('Grocery Shopping', 'Buy groceries for the week.', 30, '2024-03-22', 'Weekly', 'Errands', 1);

-- Chore 2 (Parent of Chore 3)
INSERT INTO Chores (Title, Description, Reward, DueDate, Frequency, Category, CreatedBy)
VALUES ('Clean the House', 'Clean all rooms of the house.', 50, '2024-03-24', 'Weekly', 'Cleaning', 2);

-- Chore 3 (Child of Chore 2)
INSERT INTO Chores (Title, Description, Reward, ParentId, DueDate, Frequency, Category, CreatedBy)
VALUES ('Clean the Bathroom', 'Clean the bathroom thoroughly.', 20, 2, '2024-03-24', 'Weekly', 'Cleaning', 2);  -- ParentId refers to the "Clean the House" chore

-- Chore 4 (No parent, no child)
INSERT INTO Chores (Title, Description, Reward, DueDate, Frequency, Category, CreatedBy)
VALUES ('Mow the Lawn', 'Mow the front and back lawn.', 40, '2024-03-23', 'Weekly', 'Yard Work', 1);

-- Chore 5 (Child of Chore 2)
INSERT INTO Chores (Title, Description, Reward, ParentId, DueDate, Frequency, Category, CreatedBy)
VALUES ('Vacuum Living Room', 'Vacuum the living room floor.', 15, 2, '2024-03-24', 'Weekly', 'Cleaning', 2); -- ParentId refers to the "Clean the House" chore

-- Chore 6 (Parent of Chore 7)
INSERT INTO Chores (Title, Description, Reward, DueDate, Frequency, Category, CreatedBy)
VALUES ('Bake a Cake', 'Bake a chocolate cake for the party.', 60, '2024-03-25', 'Once', 'Cooking', 1);

-- Chore 7 (Child of Chore 6)
INSERT INTO Chores (Title, Description, Reward, ParentId, DueDate, Frequency, Category, CreatedBy)
VALUES ('Prepare Frosting', 'Make the chocolate frosting for the cake.', 25, 6, '2024-03-25', 'Once', 'Cooking', 1); -- ParentId refers to "Bake a Cake"

CREATE TABLE Goals (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Title VARCHAR(255) NOT NULL,
    Type VARCHAR(50),  -- e.g., 'Financial', 'Personal', 'Health', 'Education'
    ChildId INT,       -- ID of a child goal (for sub-goals)
    CreatedBy INT,     -- ID of the user who created the goal
    CreatedAt DATETIME DEFAULT GETDATE(), -- Timestamp of goal creation
    Amount DECIMAL(18, 2), -- Target amount for the goal (if applicable)
    FOREIGN KEY (CreatedBy) REFERENCES Users(Id) -- Foreign key to the Users table
);


-- Goal 1 (No child goal)
INSERT INTO Goals (Title, Type, CreatedBy, Amount)
VALUES ('Save for Down Payment', 'Financial', 1, 10000.00);

-- Goal 2 (Parent of Goal 3)
INSERT INTO Goals (Title, Type, CreatedBy)
VALUES ('Improve Fitness', 'Health', 2);

-- Goal 3 (Child of Goal 2)
INSERT INTO Goals (Title, Type, ChildId, CreatedBy)
VALUES ('Run a 5K', 'Health', 2, 2);  -- ChildId refers to "Improve Fitness" goal.

-- Goal 4 (No child goal)
INSERT INTO Goals (Title, Type, CreatedBy)
VALUES ('Learn a New Language', 'Personal', 1);

-- Goal 5 (Parent of Goal 6)
INSERT INTO Goals (Title, Type, CreatedBy)
VALUES ('Complete College Degree', 'Education', 1);

-- Goal 6 (Child of Goal 5)
INSERT INTO Goals (Title, Type, CreatedBy)
VALUES ('Pass Calculus 101', 'Education', 5, 1); -- ChildId refers to "Complete College Degree" goal.

CREATE TABLE Transactions (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    ParentId INT,       -- ID of a parent transaction (for sub-transactions or related transactions)
    ChildId INT,        -- ID of a child transaction (for sub-transactions or related transactions)
    TaskId INT,         -- ID of the related task (foreign key to the Tasks table, if you have one)
    Amount DECIMAL(18, 2) NOT NULL, -- Transaction amount (required)
    Status VARCHAR(50) DEFAULT 'Pending', -- e.g., 'Pending', 'Completed', 'Failed', 'Refunded'
    CreatedAt DATETIME DEFAULT GETDATE(), -- Timestamp of transaction creation
    FOREIGN KEY (TaskId) REFERENCES Tasks(Id) -- Foreign key to the Tasks table (if applicable)
);

CREATE TABLE Attachments (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Type VARCHAR(50),  -- e.g., 'Image', 'Document', 'Video', 'Audio'
    Attachment VARBINARY(MAX) -- Binary data of the attachment (for storing files)
);

CREATE TABLE Comments (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    TaskId INT,       -- ID of the related task (foreign key to the Tasks table)
    Comment TEXT,      -- The comment text
    AttachmentId INT,  -- ID of the related attachment (foreign key to the Attachments table)
    CreatedBy INT,     -- ID of the user who created the comment (foreign key to the Users table)
    CreatedAt DATETIME DEFAULT GETDATE(), -- Timestamp of comment creation
    FOREIGN KEY (TaskId) REFERENCES Tasks(Id), -- Foreign key to the Tasks table
    FOREIGN KEY (AttachmentId) REFERENCES Attachments(Id), -- Foreign key to the Attachments table
    FOREIGN KEY (CreatedBy) REFERENCES Users(Id) -- Foreign key to the Users table
);
CREATE PROCEDURE GetUserDetailsByEmail (@Email VARCHAR(255))
AS
BEGIN
    -- Check if the user exists
    IF EXISTS (SELECT 1 FROM Users WHERE Email = @Email)
    BEGIN
        -- Retrieve user details
        SELECT 
            Id,
            Name,
            Email,
            Role,
            Age,
            DOB,
            Gender,
            ParentId,
            Contact,
            RewardPoints
        FROM Users
        WHERE Email = @Email;
    END
    ELSE
    BEGIN
        -- Raise an error or return a message if the user doesn't exist
        RAISERROR('User with this email not found.', 16, 1);
        -- Or return an empty result set (all columns NULL) if you prefer
    END
END;
// 1. appsettings.json
{
  "ConnectionStrings": {
    "YourDatabaseConnection": "Server=(LocalDB)\\MSSQLLocalDB;Database=YourDatabaseName;Trusted_Connection=True;"
  }
}

// 2. Interface (IUserRepository.cs)
public interface IUserRepository
{
    Task<UserDetails> GetUserDetailsByEmailAsync(string email);
}

// 3. Repository (UserRepository.cs)
public class UserRepository : IUserRepository
{
    private readonly string _connectionString;

    public UserRepository(IConfiguration configuration)
    {
        _connectionString = configuration.GetConnectionString("YourDatabaseConnection");
    }

    public async Task<UserDetails> GetUserDetailsByEmailAsync(string email)
    {
        using (SqlConnection connection = new SqlConnection(_connectionString))
        using (SqlCommand command = new SqlCommand("GetUserDetailsByEmail", connection))
        {
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.AddWithValue("@Email", email);

            try
            {
                await connection.OpenAsync();
                using (SqlDataReader reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync()) // Check if a row was returned
                    {
                        return new UserDetails
                        {
                            Id = reader.GetInt32(0),
                            Name = reader.GetString(1),
                            Email = reader.GetString(2),
                            Role = reader.IsDBNull(3) ? null : reader.GetString(3), // Handle potential DBNull
                            Age = reader.IsDBNull(4) ? null : (int?)reader.GetInt32(4),
                            DOB = reader.IsDBNull(5) ? null : (DateTime?)reader.GetDateTime(5),
                            Gender = reader.IsDBNull(6) ? null : reader.GetString(6),
                            ParentId = reader.IsDBNull(7) ? null : (int?)reader.GetInt32(7),
                            Contact = reader.IsDBNull(8) ? null : reader.GetString(8),
                            RewardPoints = reader.IsDBNull(9) ? null : (int?)reader.GetInt32(9)
                        };
                    }
                    else
                    {
                        return null; // Or throw an exception if you prefer
                    }
                }
            }
            catch (Exception ex)
            {
                // Log the exception (using a logging framework)
                Console.WriteLine($"Error in GetUserDetailsByEmailAsync: {ex.Message}");
                throw; // Re-throw the exception after logging
            }
        }
    }
}


// 4. Model (UserDetails.cs)
public class UserDetails
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Email { get; set; }
    public string Role { get; set; }
    public int? Age { get; set; } // Nullable int
    public DateTime? DOB { get; set; } // Nullable DateTime
    public string Gender { get; set; }
    public int? ParentId { get; set; } // Nullable int
    public string Contact { get; set; }
    public int? RewardPoints { get; set; } // Nullable int
}

// 5. Service (UserService.cs)
public class UserService : IUserService
{
    private readonly IUserRepository _userRepository;

    public UserService(IUserRepository userRepository)
    {
        _userRepository = userRepository;
    }

    public async Task<UserDetails> GetUserDetailsByEmailAsync(string email)
    {
        return await _userRepository.GetUserDetailsByEmailAsync(email);
    }
}

public interface IUserService
{
    Task<UserDetails> GetUserDetailsByEmailAsync(string email);
}

// 6. Controller (YourController.cs)
[ApiController]
[Route("[controller]")]
public class YourController : ControllerBase
{
    private readonly IUserService _userService;

    public YourController(IUserService userService)
    {
        _userService = userService;
    }

    [HttpGet("{email}")]
    public async Task<IActionResult> GetUser(string email)
    {
        var user = await _userService.GetUserDetailsByEmailAsync(email);

        if (user == null)
        {
            return NotFound(); // Or NoContent(), depending on your preference
        }

        return Ok(user);
    }
}

// 7. Startup.cs (or Program.cs in .NET 6+)
public void ConfigureServices(IServiceCollection services)
{
    services.AddControllers();
    services.AddTransient<IUserRepository, UserRepository>();
    services.AddTransient<IUserService, UserService>();

    // Add your connection string
    services.AddDbContext<YourDbContext>(options =>
        options.UseSqlServer(Configuration.GetConnectionString("YourDatabaseConnection")));
}

// In .NET 6+ Program.cs:
builder.Services.AddControllers();
builder.Services.AddTransient<IUserRepository, UserRepository>();
builder.Services.AddTransient<IUserService, UserService>();

builder.Services.AddDbContext<YourDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("YourDatabaseConnection")));


-- Stored Procedure (GetChoreTemplates)
CREATE PROCEDURE GetChoreTemplates
AS
BEGIN
    SELECT 
        Id,
        Title,
        Description,
        Category
    FROM ChoreTemplates;
END;
// 1. Interface (IChoreTemplateRepository.cs)
public interface IChoreTemplateRepository
{
    Task<List<ChoreTemplate>> GetChoreTemplatesAsync();
}

// 2. Repository (ChoreTemplateRepository.cs)
public class ChoreTemplateRepository : IChoreTemplateRepository
{
    private readonly string _connectionString;
    private readonly ILogger<ChoreTemplateRepository> _logger; // Add logging

    public ChoreTemplateRepository(IConfiguration configuration, ILogger<ChoreTemplateRepository> logger)
    {
        _connectionString = configuration.GetConnectionString("YourDatabaseConnection");
        _logger = logger;
    }

    public async Task<List<ChoreTemplate>> GetChoreTemplatesAsync()
    {
        List<ChoreTemplate> choreTemplates = new List<ChoreTemplate>();

        using (SqlConnection connection = new SqlConnection(_connectionString))
        using (SqlCommand command = new SqlCommand("GetChoreTemplates", connection))
        {
            command.CommandType = CommandType.StoredProcedure;

            try
            {
                await connection.OpenAsync();
                using (SqlDataReader reader = await command.ExecuteReaderAsync())
                {
                    while (await reader.ReadAsync())
                    {
                        choreTemplates.Add(new ChoreTemplate
                        {
                            Id = reader.GetInt32(0),
                            Title = reader.GetString(1),
                            Description = reader.IsDBNull(2) ? null : reader.GetString(2),
                            Category = reader.IsDBNull(3) ? null : reader.GetString(3)
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in GetChoreTemplatesAsync");
                throw; // Re-throw after logging
            }
        }

        return choreTemplates;
    }
}

// 3. Model (ChoreTemplate.cs)
public class ChoreTemplate
{
    public int Id { get; set; }
    public string Title { get; set; }
    public string Description { get; set; }
    public string Category { get; set; }
}

// 4. Service (ChoreTemplateService.cs)
public interface IChoreTemplateService
{
    Task<List<ChoreTemplate>> GetChoreTemplatesAsync();
}

public class ChoreTemplateService : IChoreTemplateService
{
    private readonly IChoreTemplateRepository _choreTemplateRepository;

    public ChoreTemplateService(IChoreTemplateRepository choreTemplateRepository)
    {
        _choreTemplateRepository = choreTemplateRepository;
    }

    public async Task<List<ChoreTemplate>> GetChoreTemplatesAsync()
    {
        return await _choreTemplateRepository.GetChoreTemplatesAsync();
    }
}

// 5. Controller (ChoreTemplateController.cs)
[ApiController]
[Route("api/[controller]")] // Use "api" prefix for better API organization
public class ChoreTemplateController : ControllerBase
{
    private readonly IChoreTemplateService _choreTemplateService;

    public ChoreTemplateController(IChoreTemplateService choreTemplateService)
    {
        _choreTemplateService = choreTemplateService;
    }

    [HttpGet] // No need for {id} since we're getting all templates
    public async Task<IActionResult> GetChoreTemplates()
    {
        var choreTemplates = await _choreTemplateService.GetChoreTemplatesAsync();
        return Ok(choreTemplates); // Return 200 OK with the list of templates
    }
}

// 6. Startup.cs (or Program.cs in .NET 6+) - Add registrations
public void ConfigureServices(IServiceCollection services)
{
    // ... other services

    services.AddTransient<IChoreTemplateRepository, ChoreTemplateRepository>();
    services.AddTransient<IChoreTemplateService, ChoreTemplateService>();
}

// .NET 6+ Program.cs:
builder.Services.AddTransient<IChoreTemplateRepository, ChoreTemplateRepository>();
builder.Services.AddTransient<IChoreTemplateService, ChoreTemplateService>();

// Don't forget to add logging!
builder.Logging.AddConsole(); // Or your preferred logging provider

