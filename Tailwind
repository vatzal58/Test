import React, { useState, useEffect } from 'react';
import { PieChart, Pie, BarChart, Bar, XAxis, YAxis, Tooltip, Cell, ResponsiveContainer } from 'recharts';
import {
  Box,
  Button,
  Container,
  Typography,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Grid,
  Modal,
  Chip,
  styled,
  CircularProgress,
  Alert
} from '@mui/material';
import axios from 'axios';

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];

// Styled components
const ChildButton = styled(Button)(({ theme, selected }) => ({
  padding: theme.spacing(1, 2),
  borderRadius: theme.shape.borderRadius,
  transition: 'all 0.2s',
  backgroundColor: selected ? theme.palette.primary.main : theme.palette.grey[200],
  color: selected ? theme.palette.primary.contrastText : theme.palette.text.primary,
  '&:hover': {
    backgroundColor: selected ? theme.palette.primary.dark : theme.palette.grey[300],
  },
  transform: selected ? 'scale(1.05)' : 'none',
}));

const ChartContainer = styled(Paper)(({ theme }) => ({
  padding: theme.spacing(2),
  borderRadius: theme.shape.borderRadius,
  boxShadow: theme.shadows[1],
  minHeight: '400px',
  display: 'flex',
  flexDirection: 'column',
}));

const StatusChip = styled(Chip)(({ theme, status }) => ({
  backgroundColor: status === 'completed' ? theme.palette.success.light : theme.palette.warning.light,
  color: status === 'completed' ? theme.palette.success.dark : theme.palette.warning.dark,
}));

const LoadingContainer = styled(Box)({
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  minHeight: '200px',
});

const EmptyStateContainer = styled(Box)({
  display: 'flex',
  flexDirection: 'column',
  justifyContent: 'center',
  alignItems: 'center',
  minHeight: '200px',
  textAlign: 'center',
});

const ParentChores = () => {
  const [chores, setChores] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedChildren, setSelectedChildren] = useState([]);
  const [selectedChore, setSelectedChore] = useState(null);
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [selectedRewardRange, setSelectedRewardRange] = useState(null);
  const [hoveredPieIndex, setHoveredPieIndex] = useState(null);
  const [hoveredBarIndex, setHoveredBarIndex] = useState(null);

  const rewardRanges = [
    { min: 0, max: 2, label: '$0-$2' },
    { min: 3, max: 4, label: '$3-$4' },
    { min: 5, max: Infinity, label: '$5+' }
  ];

  // Fetch chores data with error handling
  useEffect(() => {
    const fetchChores = async () => {
      try {
        setLoading(true);
        const response = await axios.get('/api/chores');
        // Validate and sanitize the data
        const validChores = (response.data || []).filter(chore => 
          chore &&
          typeof chore.choreId === 'number' &&
          typeof chore.title === 'string' &&
          typeof chore.childName === 'string' &&
          typeof chore.reward === 'number' &&
          typeof chore.status === 'string'
        );
        setChores(validChores);
        setError(null);
      } catch (err) {
        setError(err.message || 'Failed to fetch chores');
        setChores([]);
      } finally {
        setLoading(false);
      }
    };

    fetchChores();
  }, []);

  // Safe data getters with fallbacks
  const getUniqueChildren = () => {
    try {
      return [...new Set(chores.map(chore => chore?.childName).filter(Boolean))];
    } catch {
      return [];
    }
  };

  const children = getUniqueChildren();

  // Safe filtering with fallbacks
  const getFilteredChores = () => {
    try {
      const childFiltered = selectedChildren.length > 0
        ? chores.filter(chore => selectedChildren.includes(chore.childName))
        : chores;

      return childFiltered.filter(chore => {
        const categoryFilter = !selectedCategory || chore.category === selectedCategory;
        const rewardFilter = !selectedRewardRange || 
          (chore.reward >= selectedRewardRange.min && chore.reward <= selectedRewardRange.max);
        return categoryFilter && rewardFilter;
      });
    } catch {
      return [];
    }
  };

  const filteredChores = getFilteredChores();

  // Safe chart data calculations with fallbacks
  const getCategoryData = () => {
    try {
      const categories = filteredChores.reduce((acc, chore) => {
        if (chore.category) {
          acc[chore.category] = (acc[chore.category] || 0) + 1;
        }
        return acc;
      }, {});
      return Object.entries(categories).map(([name, value]) => ({ name, value }));
    } catch {
      return [];
    }
  };

  const getRewardData = () => {
    try {
      return rewardRanges.map(range => ({
        name: range.label,
        value: filteredChores.filter(chore => 
          chore.reward >= range.min && chore.reward <= range.max
        ).length,
        range
      }));
    } catch {
      return [];
    }
  };

  const categoryData = getCategoryData();
  const rewardData = getRewardData();

  // Event handlers with safety checks
  const handleChildToggle = (childName) => {
    if (!childName) return;
    setSelectedChildren(prev =>
      prev.includes(childName)
        ? prev.filter(name => name !== childName)
        : [...prev, childName]
    );
    setSelectedCategory(null);
    setSelectedRewardRange(null);
  };

  const handleCategoryClick = (entry) => {
    if (!entry?.name) return;
    setSelectedCategory(prev => prev === entry.name ? null : entry.name);
  };

  const handleRewardRangeClick = (entry) => {
    if (!entry?.range) return;
    setSelectedRewardRange(prev => 
      prev?.label === entry.range.label ? null : entry.range
    );
  };

  const getPieRadius = (index) => {
    if (selectedCategory && categoryData[index]) {
      return categoryData[index].name === selectedCategory ? [70, 100] : [60, 90];
    }
    return hoveredPieIndex === index ? [70, 100] : [60, 90];
  };

  // Loading state
  if (loading) {
    return (
      <Container maxWidth="lg" sx={{ py: 3 }}>
        <LoadingContainer>
          <CircularProgress />
        </LoadingContainer>
      </Container>
    );
  }

  // Error state
  if (error) {
    return (
      <Container maxWidth="lg" sx={{ py: 3 }}>
        <Alert severity="error" sx={{ mb: 2 }}>
          {error}
        </Alert>
      </Container>
    );
  }

  // Empty state
  if (!chores.length) {
    return (
      <Container maxWidth="lg" sx={{ py: 3 }}>
        <EmptyStateContainer>
          <Typography variant="h6" color="textSecondary" gutterBottom>
            No chores found
          </Typography>
          <Typography variant="body1" color="textSecondary">
            There are currently no chores assigned.
          </Typography>
        </EmptyStateContainer>
      </Container>
    );
  }

  return (
    <Container maxWidth="lg" sx={{ py: 3 }}>
      <Box mb={3}>
        <Typography variant="h4" component="h2" gutterBottom>
          Chores Dashboard
        </Typography>
        <Box display="flex" gap={1} mb={2}>
          {children.map(child => (
            <ChildButton
              key={child}
              onClick={() => handleChildToggle(child)}
              selected={selectedChildren.includes(child)}
            >
              {child}
            </ChildButton>
          ))}
        </Box>
      </Box>

      <Grid container spacing={2} mb={3}>
        <Grid item xs={12} md={6}>
          <ChartContainer>
            <Box display="flex" alignItems="center" mb={1}>
              <Typography variant="h6">
                Chores by Category
              </Typography>
              {selectedCategory && (
                <Button
                  size="small"
                  onClick={() => setSelectedCategory(null)}
                  sx={{ ml: 1 }}
                >
                  (Reset)
                </Button>
              )}
            </Box>
            {categoryData.length > 0 ? (
              <PieChart width={300} height={300}>
                <Pie
                  data={categoryData}
                  cx={150}
                  cy={150}
                  dataKey="value"
                  onClick={handleCategoryClick}
                  onMouseEnter={(_, index) => setHoveredPieIndex(index)}
                  onMouseLeave={() => setHoveredPieIndex(null)}
                  animationDuration={300}
                >
                  {categoryData.map((entry, index) => (
                    <Cell 
                      key={`cell-${index}`} 
                      fill={COLORS[index % COLORS.length]}
                      opacity={selectedCategory && selectedCategory !== entry.name ? 0.3 : 1}
                      radius={getPieRadius(index)}
                    />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            ) : (
              <EmptyStateContainer>
                <Typography variant="body1" color="textSecondary">
                  No category data available
                </Typography>
              </EmptyStateContainer>
            )}
          </ChartContainer>
        </Grid>

        <Grid item xs={12} md={6}>
          <ChartContainer>
            <Box display="flex" alignItems="center" mb={1}>
              <Typography variant="h6">
                Chores by Reward Range
              </Typography>
              {selectedRewardRange && (
                <Button
                  size="small"
                  onClick={() => setSelectedRewardRange(null)}
                  sx={{ ml: 1 }}
                >
                  (Reset)
                </Button>
              )}
            </Box>
            {rewardData.some(item => item.value > 0) ? (
              <BarChart width={300} height={300} data={rewardData}>
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Bar
                  dataKey="value"
                  onClick={handleRewardRangeClick}
                  onMouseEnter={(_, index) => setHoveredBarIndex(index)}
                  onMouseLeave={() => setHoveredBarIndex(null)}
                  animationDuration={300}
                >
                  {rewardData.map((entry, index) => (
                    <Cell 
                      key={`cell-${index}`} 
                      fill={COLORS[index % COLORS.length]}
                      opacity={selectedRewardRange && selectedRewardRange.label !== entry.range.label ? 0.3 : 1}
                    />
                  ))}
                </Bar>
              </BarChart>
            ) : (
              <EmptyStateContainer>
                <Typography variant="body1" color="textSecondary">
                  No reward data available
                </Typography>
              </EmptyStateContainer>
            )}
          </ChartContainer>
        </Grid>
      </Grid>

      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Title</TableCell>
              <TableCell>Child</TableCell>
              <TableCell>Reward</TableCell>
              <TableCell>Due Date</TableCell>
              <TableCell>Status</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {filteredChores.length > 0 ? (
              filteredChores.map(chore => (
                <TableRow
                  key={chore.choreId}
                  onClick={() => setSelectedChore(chore)}
                  hover
                  sx={{ cursor: 'pointer' }}
                >
                  <TableCell>{chore.title || 'N/A'}</TableCell>
                  <TableCell>{chore.childName || 'N/A'}</TableCell>
                  <TableCell>${chore.reward || 0}</TableCell>
                  <TableCell>{chore.dueDate || 'N/A'}</TableCell>
                  <TableCell>
                    <StatusChip
                      label={chore.status || 'pending'}
                      status={chore.status || 'pending'}
                      size="small"
                    />
                  </TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={5} align="center">
                  <Typography variant="body1" color="textSecondary">
                    No chores found
                  </Typography>
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </TableContainer>

      <Modal
        open={Boolean(selectedChore)}
        onClose={() => setSelectedChore(null)}
        sx={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        <Paper
          sx={{
            position: 'relative',
            maxWidth: 400,
            p: 3,
            outline: 'none',
          }}
        >
          {selectedChore && (
            <>
              <Typography variant="h5" gutterBottom>
                {selectedChore.title || 'N/A'}
              </Typography>
              <Typography variant="body1" paragraph>
                <strong>Description:</strong> {selectedChore.description || 'No description available'}
              </Typography>
              <Typography variant="body1" paragraph>
                <strong>Category:</strong> {selectedChore.category || 'N/A'}
              </Typography>
              <Typography variant="body1" paragraph>
                <strong>Child:</strong> {selectedChore.childName || 'N/A'}
              </Typography>
              <Typography variant="body1" paragraph>
                <strong>Reward:</strong> ${selectedChore.reward || 0}
              </Typography>
              <Typography variant="body1" paragraph>
                <strong>Due Date:</strong> {selectedChore.dueDate || 'N/A'}
              </Typography>
              <Typography variant="body1" paragraph>
                <strong>Status:</strong> {selectedChore.status || 'pending'}
              </Typography>
              <Button
                variant="
