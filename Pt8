import React, { useState, useMemo } from 'react';
import { 
  Checkbox, 
  List, 
  ListItem, 
  ListItemIcon, 
  ListItemText, 
  Collapse,
  Popover,
  Divider,
  TextField,
  Button
} from '@mui/material';
import { createTheme, ThemeProvider } from '@mui/material/styles';
import SearchIcon from '@mui/icons-material/Search';
import ExpandLess from '@mui/icons-material/ExpandLess';
import ExpandMore from '@mui/icons-material/ExpandMore';

// Custom theme
const theme = createTheme({
  typography: {
    fontFamily: 'Roboto, Arial, sans-serif',
  },
  components: {
    MuiCheckbox: {
      styleOverrides: {
        root: {
          color: '#757575', // Default color
          '&.Mui-checked': {
            color: '#1976d2', // Custom checked color
          },
        },
      },
    },
    MuiTextField: {
      styleOverrides: {
        root: {
          '& .MuiOutlinedInput-root': {
            '& fieldset': {
              borderColor: '#bdbdbd',
            },
            '&:hover fieldset': {
              borderColor: '#1976d2',
            },
          },
          '& .MuiInputBase-input': {
            fontFamily: 'Roboto, Arial, sans-serif',
            fontSize: '14px',
          },
          '& .MuiInputBase-input::placeholder': {
            color: '#757575',
            opacity: 1,
            backgroundColor: 'white', // Keep white background on placeholder
          },
        },
      },
    },
  },
});

// [Rest of the previous component code remains the same until the return statement]

return (
  <ThemeProvider theme={theme}>
    <div>
      {/* Dropdown Trigger Button */}
      <Button 
        variant="outlined" 
        onClick={handleOpenDropdown}
        sx={{ 
          width: '250px', 
          textTransform: 'none',
          fontFamily: 'Roboto, Arial, sans-serif',
          fontSize: '14px'
        }}
      >
        {renderSelectedItemsSummary()}
      </Button>

      <Popover
        open={Boolean(anchorEl)}
        anchorEl={anchorEl}
        onClose={handleCloseDropdown}
        anchorOrigin={{
          vertical: 'bottom',
          horizontal: 'left',
        }}
        transformOrigin={{
          vertical: 'top',
          horizontal: 'left',
        }}
      >
        <List sx={{ 
          width: '300px', 
          maxHeight: '400px',
          fontFamily: 'Roboto, Arial, sans-serif'
        }}>
          {/* Search Input */}
          <ListItem>
            <TextField
              fullWidth
              variant="outlined"
              placeholder="Search items..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              InputProps={{
                startAdornment: <SearchIcon sx={{ mr: 1 }} />,
              }}
              size="small"
            />
          </ListItem>

          {/* Select All / Deselect All Options */}
          <ListItem>
            <ListItemIcon sx={{ minWidth: 40 }}>
              <Checkbox
                edge="start"
                checked={areAllItemsSelected}
                indeterminate={
                  selectedItems.length > 0 && 
                  selectedItems.length < allItemIds.length
                }
                onChange={areAllItemsSelected ? deselectAllItems : selectAllItems}
              />
            </ListItemIcon>
            <ListItemText 
              primary={areAllItemsSelected ? 'Deselect All' : 'Select All'}
              primaryTypographyProps={{
                style: { fontFamily: 'Roboto, Arial, sans-serif', fontSize: '14px' }
              }}
            />
          </ListItem>
          
          <Divider />

          {/* Hierarchical List with Expand/Collapse */}
          <List 
            sx={{ 
              maxHeight: '250px', 
              overflow: 'auto',
            }}
          >
            {filteredItems.map(parent => (
              <React.Fragment key={parent.id}>
                {/* Parent Category Item */}
                <ListItem>
                  <ListItemIcon sx={{ minWidth: 40 }}>
                    <Checkbox
                      edge="start"
                      checked={
                        parent.children?.every(child => 
                          selectedItems.includes(child.id)
                        )
                      }
                      indeterminate={
                        parent.children?.some(child => 
                          selectedItems.includes(child.id)
                        ) && 
                        !parent.children?.every(child => 
                          selectedItems.includes(child.id)
                        )
                      }
                      onChange={() => toggleParentCategory(parent)}
                    />
                  </ListItemIcon>
                  <ListItemText 
                    primary={parent.label}
                    primaryTypographyProps={{
                      style: { fontFamily: 'Roboto, Arial, sans-serif', fontSize: '14px' }
                    }}
                  />
                  {parent.children && (
                    <div 
                      onClick={() => toggleCategory(parent.id)}
                      style={{ 
                        display: 'flex', 
                        alignItems: 'center',
                        marginLeft: 'auto' // Push expand icon to the right
                      }}
                    >
                      {openCategories.includes(parent.id) ? <ExpandLess /> : <ExpandMore />}
                    </div>
                  )}
                </ListItem>

                {/* Child Items Collapse */}
                {parent.children && (
                  <Collapse 
                    in={openCategories.includes(parent.id)} 
                    timeout="auto" 
                    unmountOnExit
                  >
                    <List component="div" disablePadding>
                      {parent.children.map(child => (
                        <ListItem key={child.id} sx={{ pl: 4 }}>
                          <ListItemIcon sx={{ minWidth: 40 }}>
                            <Checkbox
                              edge="start"
                              checked={selectedItems.includes(child.id)}
                              onChange={() => toggleItemSelection(child.id)}
                            />
                          </ListItemIcon>
                          <ListItemText 
                            primary={child.label}
                            primaryTypographyProps={{
                              style: { fontFamily: 'Roboto, Arial, sans-serif', fontSize: '14px' }
                            }}
                          />
                        </ListItem>
                      ))}
                    </List>
                  </Collapse>
                )}
              </React.Fragment>
            ))}
          </List>
        </List>
      </Popover>
    </div>
  </ThemeProvider>
);

export default HierarchicalCheckboxDropdown;
