import React, { useState, useMemo } from 'react';
import { 
  Checkbox, 
  List, 
  ListItem, 
  ListItemIcon, 
  ListItemText, 
  Popover,
  Divider,
  TextField,
  Button
} from '@mui/material';
import SearchIcon from '@mui/icons-material/Search';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import { styled } from '@mui/material/styles';

// Define the type for our hierarchical data
interface TreeItem {
  id: string;
  label: string;
  children?: TreeItem[];
}

const hierarchicalData: TreeItem[] = [
  {
    id: 'fruits',
    label: 'Fruits',
    children: [
      { id: 'apple', label: 'Apple' },
      { id: 'banana', label: 'Banana' },
      { id: 'cherry', label: 'Cherry' },
      { id: 'date', label: 'Date' },
      { id: 'elderberry', label: 'Elderberry' }
    ]
  },
  {
    id: 'vegetables',
    label: 'Vegetables',
    children: [
      { id: 'carrot', label: 'Carrot' },
      { id: 'broccoli', label: 'Broccoli' },
      { id: 'spinach', label: 'Spinach' },
      { id: 'tomato', label: 'Tomato' },
      { id: 'cucumber', label: 'Cucumber' }
    ]
  }
];

const HierarchicalCheckboxDropdown: React.FC = () => {
  const [selectedItems, setSelectedItems] = useState<string[]>([]);
  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);
  const [searchTerm, setSearchTerm] = useState<string>('');

  // Flatten all items with their full path for searching
  const flattenedItems = useMemo(() => {
    const flatten = (data: TreeItem[], parentLabel = ''): Array<{
      id: string;
      label: string;
      fullPath: string;
    }> => {
      return data.flatMap(item => {
        const currentPath = parentLabel 
          ? `${parentLabel} > ${item.label}`
          : item.label;
        
        if (item.children) {
          return [
            { 
              id: item.id, 
              label: item.label, 
              fullPath: currentPath 
            },
            ...flatten(item.children, currentPath)
          ];
        }
        return { 
          id: item.id, 
          label: item.label, 
          fullPath: currentPath 
        };
      });
    };
    return flatten(hierarchicalData);
  }, []);

  // Filtered items based on search
  const filteredItems = useMemo(() => {
    if (!searchTerm) return flattenedItems;
    
    const normalizedSearch = searchTerm.toLowerCase();
    return flattenedItems.filter(item => 
      item.label.toLowerCase().includes(normalizedSearch) ||
      item.fullPath.toLowerCase().includes(normalizedSearch)
    );
  }, [flattenedItems, searchTerm]);

  // Flatten all item IDs for select/deselect all
  const allItemIds = useMemo(() => 
    flattenedItems.map(item => item.id), 
    [flattenedItems]
  );

  // Toggle dropdown open
  const handleOpenDropdown = (event: React.MouseEvent<HTMLButtonElement>) => {
    setAnchorEl(event.currentTarget);
  };

  // Close dropdown
  const handleCloseDropdown = () => {
    setAnchorEl(null);
    setSearchTerm('');
  };

  // Toggle individual item selection
  const toggleItemSelection = (itemId: string) => {
    setSelectedItems(prev => 
      prev.includes(itemId)
        ? prev.filter(id => id !== itemId)
        : [...prev, itemId]
    );
  };

  // Select all items
  const selectAllItems = () => {
    setSelectedItems(allItemIds);
  };

  // Deselect all items
  const deselectAllItems = () => {
    setSelectedItems([]);
  };

  // Render selected items summary
  const renderSelectedItemsSummary = () => {
    const selectedCount = selectedItems.length;
    return selectedCount === 0 ? 'Select Items' : `${selectedCount} Selected`;
  };

  // Check if all items are selected
  const areAllItemsSelected = useMemo(() => 
    allItemIds.length > 0 && allItemIds.every(id => selectedItems.includes(id)),
    [allItemIds, selectedItems]
  );

  // Custom styled components
  const StyledPopover = styled(Popover)({
    '& .MuiPopover-paper': {
      backgroundColor: 'white',
      borderRadius: '8px',
      boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)',
    },
  });

  const StyledCheckbox = styled(Checkbox)({
    '& .MuiSvgIcon-root': {
      color: '#007bff',
    },
  });

  const StyledListItem = styled(ListItem)({
    fontFamily: 'Arial, sans-serif',
    fontSize: '14px',
  });

  const StyledExpandIcon = styled(ExpandMoreIcon)({
    color: '#000',
    fontSize: '16px',
  });

  return (
    <div>
      {/* Dropdown Trigger Button */}
      <Button 
        variant="outlined" 
        onClick={handleOpenDropdown}
        sx={{ 
          width: '250px', 
          textTransform: 'none',
          fontFamily: 'Arial, sans-serif',
          fontSize: '14px',
        }}
      >
        {renderSelectedItemsSummary()}
        <StyledExpandIcon />
      </Button>

      <StyledPopover
        open={Boolean(anchorEl)}
        anchorEl={anchorEl}
        onClose={handleCloseDropdown}
        anchorOrigin={{
          vertical: 'bottom',
          horizontal: 'left',
        }}
        transformOrigin={{
          vertical: 'top',
          horizontal: 'left',
        }}
      >
        <List sx={{ width: '300px', maxHeight: '400px' }}>
          {/* Search Input */}
          <StyledListItem>
            <TextField
              fullWidth
              variant="outlined"
              placeholder="Search items..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              InputProps={{
                startAdornment: <SearchIcon sx={{ mr: 1 }} />,
              }}
              size="small"
              sx={{ 
                fontFamily: 'Arial, sans-serif',
                fontSize: '14px',
              }}
            />
          </StyledListItem>

          {/* Select All / Deselect All Options */}
          <StyledListItem>
            <ListItemIcon>
              <StyledCheckbox
                edge="start"
                checked={areAllItemsSelected}
                indeterminate={
                  selectedItems.length > 0 && 
                  selectedItems.length < allItemIds.length
                }
                onChange={areAllItemsSelected ? deselectAllItems : selectAllItems}
              />
            </ListItemIcon>
            <ListItemText 
              primary={areAllItemsSelected ? 'Deselect All' : 'Select All'} 
            />
          </StyledListItem>
          
          <Divider />

          {/* Filtered and Searchable List */}
          <List 
            sx={{ 
              maxHeight: '250px', 
              overflow: 'auto',
              '& .MuiListItem-root': { 
                paddingLeft: '16px' 
              }
            }}
          >
            {filteredItems.length === 0 ? (
              <StyledListItem>
                <ListItemText primary="No items found" />
              </StyledListItem>
            ) : (
              filteredItems.map(item => (
                <StyledListItem key={item.id} dense>
                  <ListItemIcon>
                    <StyledCheckbox
                      edge="start"
                      checked={selectedItems.includes(item.id)}
                      onChange={() => toggleItemSelection(item.id)}
                    />
                  </ListItemIcon>
                  <ListItemText 
                    primary={item.label}
                    secondary={item.fullPath !== item.label ? item.fullPath : undefined}
                  />
                </StyledListItem>
              ))
            )}
          </List>
        </List>
      </StyledPopover>
    </div>
  );
};

export default HierarchicalCheckboxDropdown;
