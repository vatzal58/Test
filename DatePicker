import React, { useState, useEffect } from 'react';
import { 
  TextField, 
  InputAdornment, 
  IconButton,
  Popover,
  Paper,
  Typography,
  styled
} from '@mui/material';
import { 
  CalendarToday as CalendarIcon,
  ArrowBack as ArrowBackIcon,
  ArrowForward as ArrowForwardIcon 
} from '@mui/icons-material';

// Define interface for the component props
interface DatePickerProps {
  value: number | undefined;
  onChange: (value: number | undefined) => void;
  disabledDates?: (date: Date) => boolean;
  placeholder?: string;
}

// Styled components
const StyledTextField = styled(TextField)({
  '& .MuiInputBase-input': {
    fontSize: '1.2rem',
  },
});

const CalendarContainer = styled(Paper)({
  padding: '16px',
  width: '320px',
});

const CalendarHeader = styled('div')({
  display: 'flex',
  justifyContent: 'space-between',
  alignItems: 'center',
  marginBottom: '16px',
});

const DaysGrid = styled('div')({
  display: 'grid',
  gridTemplateColumns: 'repeat(7, 1fr)',
  gap: '8px',
});

const DayCell = styled('div')<{ isSelected?: boolean; isDisabled?: boolean; isCurrentMonth?: boolean }>(
  ({ isSelected, isDisabled, isCurrentMonth }) => ({
    width: '35px',
    height: '35px',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    cursor: isDisabled ? 'default' : 'pointer',
    borderRadius: '50%',
    backgroundColor: isSelected ? '#1976d2' : 'transparent',
    color: 
      isDisabled ? '#ccc' : 
      !isCurrentMonth ? '#999' :
      isSelected ? 'white' : 'inherit',
    '&:hover': {
      backgroundColor: isDisabled ? 'transparent' : isSelected ? '#1976d2' : '#f5f5f5',
    },
  })
);

const WeekdayHeader = styled('div')({
  width: '35px',
  height: '35px',
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  fontWeight: 'bold',
});

const DatePicker: React.FC<DatePickerProps> = ({ 
  value, 
  onChange, 
  disabledDates,
  placeholder = 'MM/DD/YYYY'
}) => {
  // Internal state
  const [inputValue, setInputValue] = useState<string>('');
  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);
  const [currentMonth, setCurrentMonth] = useState<Date>(
    value ? new Date(value) : new Date()
  );
  
  // Effect to update input value when the external value changes
  useEffect(() => {
    if (value !== undefined) {
      const date = new Date(value);
      setInputValue(formatDate(date));
    } else {
      setInputValue('');
    }
  }, [value]);

  // Helper functions
  const formatDate = (date: Date): string => {
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const day = date.getDate().toString().padStart(2, '0');
    const year = date.getFullYear();
    return `${month}/${day}/${year}`;
  };

  const parseDate = (dateString: string): number | undefined => {
    // Check if the format is valid MM/DD/YYYY
    const regex = /^(0[1-9]|1[0-2])\/(0[1-9]|[12]\d|3[01])\/\d{4}$/;
    if (!regex.test(dateString)) return undefined;

    const [month, day, year] = dateString.split('/').map(Number);
    const date = new Date(year, month - 1, day);
    
    // Validate that the date is real (handles cases like 02/31/2023)
    if (
      date.getFullYear() !== year ||
      date.getMonth() !== month - 1 ||
      date.getDate() !== day
    ) {
      return undefined;
    }
    
    return date.getTime();
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newInputValue = e.target.value;
    setInputValue(newInputValue);
    
    // If the input matches the expected format, update the value
    if (newInputValue.length === 10) {
      const timestamp = parseDate(newInputValue);
      onChange(timestamp);
    } else if (newInputValue === '') {
      onChange(undefined);
    }
  };

  const handleCalendarOpen = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
    // If there's a value, set the calendar to that month
    if (value) {
      setCurrentMonth(new Date(value));
    }
  };

  const handleCalendarClose = () => {
    setAnchorEl(null);
  };

  const handleDateSelect = (day: number, month: number, year: number) => {
    const selectedDate = new Date(year, month, day);
    const timestamp = selectedDate.getTime();
    onChange(timestamp);
    handleCalendarClose();
  };

  const handlePrevMonth = () => {
    setCurrentMonth(prev => {
      const newMonth = new Date(prev);
      newMonth.setMonth(newMonth.getMonth() - 1);
      return newMonth;
    });
  };

  const handleNextMonth = () => {
    setCurrentMonth(prev => {
      const newMonth = new Date(prev);
      newMonth.setMonth(newMonth.getMonth() + 1);
      return newMonth;
    });
  };

  // Calendar generation
  const generateCalendar = () => {
    const year = currentMonth.getFullYear();
    const month = currentMonth.getMonth();
    
    // Get first day of the month
    const firstDay = new Date(year, month, 1);
    // Get the day of the week (0 = Sunday, 1 = Monday, etc.)
    const firstDayOfWeek = firstDay.getDay();
    
    // Get the number of days in the month
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    
    // Get the days from the previous month to fill the first row
    const daysFromPrevMonth = firstDayOfWeek;
    const prevMonthDays = new Date(year, month, 0).getDate();
    
    // Get the selected date (if any)
    const selectedDate = value ? new Date(value) : null;
    const selectedDay = selectedDate?.getDate();
    const selectedMonth = selectedDate?.getMonth();
    const selectedYear = selectedDate?.getFullYear();
    
    // Create calendar days
    const days = [];
    
    // Days from previous month
    for (let i = daysFromPrevMonth - 1; i >= 0; i--) {
      const day = prevMonthDays - i;
      const prevMonth = month === 0 ? 11 : month - 1;
      const prevYear = month === 0 ? year - 1 : year;
      const date = new Date(prevYear, prevMonth, day);
      
      const isDisabled = disabledDates ? disabledDates(date) : false;
      
      days.push(
        <DayCell 
          key={`prev-${day}`}
          isCurrentMonth={false}
          isDisabled={isDisabled}
          onClick={() => {
            if (!isDisabled) {
              handleDateSelect(day, prevMonth, prevYear);
            }
          }}
        >
          {day}
        </DayCell>
      );
    }
    
    // Days from current month
    for (let day = 1; day <= daysInMonth; day++) {
      const date = new Date(year, month, day);
      const isSelected = 
        day === selectedDay && 
        month === selectedMonth && 
        year === selectedYear;
      const isDisabled = disabledDates ? disabledDates(date) : false;
      
      days.push(
        <DayCell 
          key={`current-${day}`}
          isSelected={isSelected}
          isDisabled={isDisabled}
          isCurrentMonth={true}
          onClick={() => {
            if (!isDisabled) {
              handleDateSelect(day, month, year);
            }
          }}
        >
          {day}
        </DayCell>
      );
    }
    
    // Fill the remaining cells with days from the next month
    const totalCells = 42; // 6 rows of 7 days
    const remainingCells = totalCells - days.length;
    
    for (let day = 1; day <= remainingCells; day++) {
      const nextMonth = month === 11 ? 0 : month + 1;
      const nextYear = month === 11 ? year + 1 : year;
      const date = new Date(nextYear, nextMonth, day);
      
      const isDisabled = disabledDates ? disabledDates(date) : false;
      
      days.push(
        <DayCell 
          key={`next-${day}`}
          isCurrentMonth={false}
          isDisabled={isDisabled}
          onClick={() => {
            if (!isDisabled) {
              handleDateSelect(day, nextMonth, nextYear);
            }
          }}
        >
          {day}
        </DayCell>
      );
    }
    
    return days;
  };

  const weekdays = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];
  const monthNames = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
  ];

  const open = Boolean(anchorEl);
  const id = open ? 'date-picker-popover' : undefined;

  return (
    <>
      <StyledTextField
        fullWidth
        value={inputValue}
        onChange={handleInputChange}
        placeholder={placeholder}
        InputProps={{
          endAdornment: (
            <InputAdornment position="end">
              <IconButton onClick={handleCalendarOpen} edge="end">
                <CalendarIcon />
              </IconButton>
            </InputAdornment>
          ),
        }}
      />
      
      <Popover
        id={id}
        open={open}
        anchorEl={anchorEl}
        onClose={handleCalendarClose}
        anchorOrigin={{
          vertical: 'bottom',
          horizontal: 'left',
        }}
        transformOrigin={{
          vertical: 'top',
          horizontal: 'left',
        }}
      >
        <CalendarContainer>
          <CalendarHeader>
            <IconButton onClick={handlePrevMonth} size="small">
              <ArrowBackIcon />
            </IconButton>
            <Typography variant="h6">
              {monthNames[currentMonth.getMonth()]} {currentMonth.getFullYear()}
            </Typography>
            <IconButton onClick={handleNextMonth} size="small">
              <ArrowForwardIcon />
            </IconButton>
          </CalendarHeader>
          
          <DaysGrid>
            {weekdays.map(day => (
              <WeekdayHeader key={day}>{day}</WeekdayHeader>
            ))}
            {generateCalendar()}
          </DaysGrid>
        </CalendarContainer>
      </Popover>
    </>
  );
};

export default DatePicker;
