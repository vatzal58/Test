import React, { useState } from "react";
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import Paper from '@mui/material/Paper';
import { TableCell, TableRow, TableSortLabel } from '@mui/material';
import "./customTable.css";
import { LimitPreworkCharacters2 } from "../../utils/LimitPreworkCharacters2";
import { ICustomTableProps } from "./ICustomTable";
import { applyFormatting } from "./Formatters";
import { useCCRContext } from "../../hooks";
import { ParseHtml } from "../../../TradeAlerts/utils/ParseHtml";
import { classNames } from "../../../packages/baml-pkg/utilities/ClassNames";
import { convertMenuLinesToBriggs } from "../../../../bo/TradeDetails/Comments";

function descendingComparator(a: any, b: any, orderBy: any, type: string) {
    if (type === "date") {
        const dateA = new Date(a[orderBy]).getTime();
        const dateB = new Date(b[orderBy]).getTime();
        if (dateB < dateA) return -1;
        if (dateB > dateA) return 1;
        return 0;
    } else if (type === "number") {
        if (b[orderBy] < a[orderBy]) return -1;
        if (b[orderBy] > a[orderBy]) return 1;
        return 0;
    } else {
        if (b[orderBy].toString().toLowerCase() < a[orderBy].toString().toLowerCase()) return -1;
        if (b[orderBy].toString().toLowerCase() > a[orderBy].toString().toLowerCase()) return 1;
        return 0;
    }
}

function getComparator(order: any, orderBy: any, type: string) {
    return order === "desc"
        ? (a: any, b: any) => descendingComparator(a, b, orderBy, type)
        : (a: any, b: any) => -descendingComparator(a, b, orderBy, type);
}

function stableSort(array: any[], comparator: any) {
    const stabilizedThis = array.map((el, index) => [el, index]);
    stabilizedThis.sort((a, b) => {
        const order = comparator(a[0], b[0]);
        if (order !== 0) return order;
        return a[1] - b[1];
    });
    return stabilizedThis.map((el) => el[0]);
}

export const PriorAlertCustomTable = (props: ICustomTableProps) => {
    const {
        rows,
        headCells,
        onHyperlinkClick,
        onQuicklinkOpen,
        showAll = false,
        showAllbutton = false,
    } = props;

    const [order, setOrder] = useState<"asc" | "desc">("asc");
    const [orderBy, setOrderBy] = useState<string>("");
    const { currentMetaData } = useCCRContext();

    const handleSort = (property: string, type: string) => {
        const isAsc = orderBy === property && order === "asc";
        setOrder(isAsc ? "desc" : "asc");
        setOrderBy(property);
    };

    const onClickDataElement = (config: {
        event: React.MouseEvent<HTMLElement>;
        row: any;
        headCell: any;
    }) => {
        const { event, row, headCell } = config;
        switch (headCell.type) {
            case "hyperlink": {
                return onHyperlinkClick?.(row[headCell.hyperlinkId]);
            }
            case "PMACLink": {
                return onHyperlinkClick?.(row);
            }
            case "quickLink": {
                return onQuicklinkOpen?.({
                    contextKey: headCell.id,
                    anchorElement: event.currentTarget,
                });
            }
        }
    };

    return (
        <Paper>
            <TableContainer
                component={Paper}
                style={
                    showAll && showAllbutton
                        ? { minHeight: "180px" }
                        : !showAll && showAllbutton
                        ? { height: '100px' }
                        : {}
                }
            >
                <Table stickyHeader aria-label="sticky table">
                    <TableHead sx={{
                        "& th": {
                            backgroundColor: "var(--ccr-sub-header-background)",
                        }
                    }}>
                        <TableRow>
                            {headCells.map((headCell: any, index: number) =>
                                headCell.ishidden ? null : (
                                    <TableCell
                                        key={index}
                                        className={headCell.headerClass}
                                        style={{
                                            verticalAlign: "center",
                                            whiteSpace: "pre",
                                            color: 'white',
                                            backgroundColor: "var(--ccr-sub-header-background)",
                                            fontFamily: "Roboto Bold",
                                            padding: "5px"
                                        }}
                                        padding={headCell.disablePadding ? "none" : "normal"}
                                        sortDirection={orderBy === headCell.id ? order : false}
                                    >
                                        <TableSortLabel
                                            active={orderBy === headCell.id}
                                            direction={orderBy === headCell.id ? order : "asc"}
                                            onClick={() => handleSort(headCell.id, headCell.type)}
                                        >
                                            <span style={{ fontSize: "var(--font-size-s)" }}>{headCell.label}</span>
                                        </TableSortLabel>
                                    </TableCell>
                                )
                            )}
                        </TableRow>
                    </TableHead>
                    <TableBody>
                        {stableSort(rows, getComparator(order, orderBy, headCells.find((hc: any) => hc.id === orderBy)?.type)).map((row, index) => (
                            <TableRow
                                style={{ color: 'white' }}
                                role="checkbox"
                                tabIndex={-1}
                                key={index}
                                className={row?.rowCSSClassName || ''}
                            >
                                {headCells.map((headCell: any, index: number) =>
                                    headCell.ishidden ? null : (
                                        <TableCell
                                            key={index}
                                            style={{ padding: "6px", verticalAlign: 'top' }}
                                            className={
                                                headCell.type === "datecss"
                                                    ? headCell.className
                                                    : headCell.type
                                            }
                                            onClick={(e) => {
                                                onClickDataElement({
                                                    event: e,
                                                    row,
                                                    headCell,
                                                });
                                            }}
                                        >
                                            {headCell.id === "MostRecentComment" && row[headCell.id]?.includes('System Generated Pre-work Link:') ? (
                                                <LimitPreworkCharacters2 textData={row[headCell.id]} />
                                            ) : headCell.id === "ClientName" ? (
                                                <div
                                                    style={{ fontSize: "var(--font-size-xs)", fontWeight: headCell.id === "MetricName" ? "bold" : "" }}
                                                    className={classNames(headCell.type, currentMetaData?.AlertKey === row.AlertKey && headCell.id === "ProcessDate" ? "same-alertKey" : "")}
                                                >
                                                    {ParseHtml(applyFormatting(row[headCell.id], headCell.Formatter || row?.Formatter))}
                                                </div>
                                            ) : (
                                                <div
                                                    style={{ fontSize: "var(--font-size-xs)", fontWeight: headCell.id === "MetricName" ? "bold" : "" }}
                                                    className={headCell.type}
                                                >
                                                    {ParseHtml(applyFormatting(row[headCell.id], headCell.Formatter || row?.Formatter))}
                                                </div>
                                            )}
                                        </TableCell>
                                    )
                                )}
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </TableContainer>
        </Paper>
    );
};
