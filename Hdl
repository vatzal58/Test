import React, { useState, useMemo } from 'react';
import { 
  Checkbox, 
  List, 
  ListItem, 
  ListItemIcon, 
  ListItemText, 
  Collapse,
  Popover,
  Divider,
  TextField,
  Button,
  createTheme,
  ThemeProvider,
  Typography,
  IconButton
} from '@mui/material';
import SearchIcon from '@mui/icons-material/Search';
import ExpandLess from '@mui/icons-material/ExpandLess';
import ExpandMore from '@mui/icons-material/ExpandMore';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import ExpandLessIcon from '@mui/icons-material/ExpandLess';

// Define the type for our hierarchical data with optional children
interface TreeItem {
  id: string;
  label: string;
  children?: TreeItem[];
}

// Define props interface
interface HierarchicalCheckboxDropdownProps {
  hierarchicalData: TreeItem[];
  selectedItems: string[];
  onSelectionChange: (selectedIds: string[]) => void;  // Changed from setSelectedItems
  placeholder?: string;
  checkboxColor?: string;
  checkboxIntermediateColor?: string;
  fontSize?: number;
  checkboxSize?: number;
  buttonFontColor?: string;
  buttonBorderColor?: string;
}

const HierarchicalCheckboxDropdown: React.FC<HierarchicalCheckboxDropdownProps> = ({
  hierarchicalData,
  selectedItems,
  onSelectionChange,  // Updated prop
  placeholder = 'Select Items',
  checkboxColor = '#1976d2',
  checkboxIntermediateColor = '#1976d2',
  fontSize = 14,
  checkboxSize = 24,
  buttonFontColor = '#1976d2',
  buttonBorderColor = '#1976d2'
}) => {
  const theme = createTheme({
    typography: {
      fontFamily: 'Roboto, Arial, sans-serif',
      body1: {
        fontSize: `${fontSize}px`,
      },
      body2: {
        fontSize: `${fontSize}px`,
      },
    },
  });

  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [openCategories, setOpenCategories] = useState<string[]>([]);

  // Handle dropdown open/close
  const handleOpenDropdown = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleCloseDropdown = () => {
    setAnchorEl(null);
  };

  // Identify all parent category IDs
  const parentCategoryIds = useMemo(() => {
    return hierarchicalData
      .filter(item => item.children && item.children.length > 0)
      .map(item => item.id);
  }, [hierarchicalData]);

  // Toggle expand/collapse for a specific category
  const toggleCategory = (categoryId: string) => {
    setOpenCategories(prev => 
      prev.includes(categoryId)
        ? prev.filter(id => id !== categoryId)
        : [...prev, categoryId]
    );
  };

  // Expand all parent categories
  const expandAllCategories = () => {
    setOpenCategories(parentCategoryIds);
  };

  // Collapse all parent categories
  const collapseAllCategories = () => {
    setOpenCategories([]);
  };

  // Helper function to get all item IDs
  const getAllItemIds = (items: TreeItem[]): string[] => {
    return items.reduce((acc: string[], item) => {
      if (item.children) {
        return [...acc, ...getAllItemIds(item.children)];
      }
      return [...acc, item.id];
    }, []);
  };

  // Check if all items are selected
  const allItemIds = useMemo(() => getAllItemIds(hierarchicalData), [hierarchicalData]);
  const areAllItemsSelected = selectedItems.length === allItemIds.length;

  // Toggle single item selection
  const toggleItemSelection = (itemId: string) => {
    const newSelectedItems = selectedItems.includes(itemId)
      ? selectedItems.filter(id => id !== itemId)
      : [...selectedItems, itemId];
    onSelectionChange(newSelectedItems);
  };

  // Toggle parent category selection
  const toggleParentCategory = (parent: TreeItem) => {
    if (!parent.children) return;

    const childIds = parent.children.map(child => child.id);
    const allChildrenSelected = childIds.every(id => selectedItems.includes(id));
    
    const newSelectedItems = allChildrenSelected
      ? selectedItems.filter(id => !childIds.includes(id))
      : [...new Set([...selectedItems, ...childIds])];
    
    onSelectionChange(newSelectedItems);
  };

  // Select all items
  const selectAllItems = () => {
    onSelectionChange(allItemIds);
  };

  // Deselect all items
  const deselectAllItems = () => {
    onSelectionChange([]);
  };

  // Filter items based on search term
  const filteredItems = useMemo(() => {
    if (!searchTerm) return hierarchicalData;

    const searchLower = searchTerm.toLowerCase();
    
    return hierarchicalData.reduce((acc: TreeItem[], item) => {
      if (item.children) {
        const filteredChildren = item.children.filter(child =>
          child.label.toLowerCase().includes(searchLower)
        );
        
        if (filteredChildren.length > 0 || item.label.toLowerCase().includes(searchLower)) {
          acc.push({
            ...item,
            children: filteredChildren
          });
        }
      } else if (item.label.toLowerCase().includes(searchLower)) {
        acc.push(item);
      }
      return acc;
    }, []);
  }, [hierarchicalData, searchTerm]);

  // Render selected items summary
  const renderSelectedItemsSummary = () => {
    if (selectedItems.length === 0) return placeholder;
    if (selectedItems.length === allItemIds.length) return 'All items selected';
    return `${selectedItems.length} items selected`;
  };

  return (
    <ThemeProvider theme={theme}>
      <div>
        <Button 
          variant="outlined" 
          onClick={handleOpenDropdown}
          sx={{ 
            width: '250px', 
            textTransform: 'none',
            color: buttonFontColor,
            borderColor: buttonBorderColor,
            '&:hover': {
              borderColor: buttonBorderColor,
            },
          }}
        >
          {renderSelectedItemsSummary()}
        </Button>

        <Popover
          open={Boolean(anchorEl)}
          anchorEl={anchorEl}
          onClose={handleCloseDropdown}
          anchorOrigin={{
            vertical: 'bottom',
            horizontal: 'left',
          }}
          transformOrigin={{
            vertical: 'top',
            horizontal: 'left',
          }}
        >
          <List sx={{ width: '300px', maxHeight: '400px' }}>
            <ListItem>
              <TextField
                fullWidth
                variant="outlined"
                placeholder="Search items..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                InputProps={{
                  startAdornment: <SearchIcon sx={{ mr: 1 }} />,
                }}
                size="small"
              />
            </ListItem>

            <ListItem 
              sx={{ 
                display: 'flex', 
                justifyContent: 'space-between', 
                alignItems: 'center' 
              }}
            >
              <div style={{ display: 'flex', alignItems: 'center' }}>
                <ListItemIcon>
                  <Checkbox
                    edge="start"
                    checked={areAllItemsSelected}
                    indeterminate={
                      selectedItems.length > 0 && 
                      selectedItems.length < allItemIds.length
                    }
                    onChange={areAllItemsSelected ? deselectAllItems : selectAllItems}
                    sx={{
                      transform: `scale(${checkboxSize / 24})`,
                      '& .MuiSvgIcon-root': {
                        width: `${checkboxSize}px`,
                        height: `${checkboxSize}px`,
                      },
                      '&.Mui-indeterminate': {
                        color: checkboxIntermediateColor,
                      }
                    }}
                  />
                </ListItemIcon>
                <ListItemText 
                  primary={
                    <Typography variant="body1" sx={{ fontSize: `${fontSize}px` }}>
                      {areAllItemsSelected ? 'Deselect All' : 'Select All'}
                    </Typography>
                  } 
                />
              </div>

              <div>
                {openCategories.length === parentCategoryIds.length ? (
                  <IconButton 
                    onClick={collapseAllCategories}
                    title="Collapse All"
                    size="small"
                  >
                    <ExpandLessIcon />
                  </IconButton>
                ) : (
                  <IconButton 
                    onClick={expandAllCategories}
                    title="Expand All"
                    size="small"
                  >
                    <ExpandMoreIcon />
                  </IconButton>
                )}
              </div>
            </ListItem>
            
            <Divider />

            <List 
              sx={{ 
                maxHeight: '250px', 
                overflow: 'auto',
              }}
            >
              {filteredItems.map(parent => (
                <React.Fragment key={parent.id}>
                  <ListItem>
                    <ListItemIcon>
                      <Checkbox
                        edge="start"
                        checked={
                          parent.children
                            ? parent.children.every(child => 
                                selectedItems.includes(child.id)
                              )
                            : selectedItems.includes(parent.id)
                        }
                        indeterminate={
                          parent.children
                            ? (parent.children.some(child => 
                                selectedItems.includes(child.id)
                              ) && 
                              !parent.children.every(child => 
                                selectedItems.includes(child.id)
                              ))
                            : false
                        }
                        onChange={() => 
                          parent.children 
                            ? toggleParentCategory(parent) 
                            : toggleItemSelection(parent.id)
                        }
                        sx={{
                          transform: `scale(${checkboxSize / 24})`,
                          '& .MuiSvgIcon-root': {
                            width: `${checkboxSize}px`,
                            height: `${checkboxSize}px`,
                          },
                        }}
                      />
                    </ListItemIcon>
                    <ListItemText primary={parent.label} />
                    {parent.children && (
                      <div onClick={() => toggleCategory(parent.id)}>
                        {openCategories.includes(parent.id) ? <ExpandLess /> : <ExpandMore />}
                      </div>
                    )}
                  </ListItem>

                  {parent.children && (
                    <Collapse 
                      in={openCategories.includes(parent.id)} 
                      timeout="auto" 
                      unmountOnExit
                    >
                      <List component="div" disablePadding>
                        {parent.children.map(child => (
                          <ListItem key={child.id} sx={{ pl: 4 }}>
                            <ListItemIcon>
                              <Checkbox
                                edge="start"
                                checked={selectedItems.includes(child.id)}
                                onChange={() => toggleItemSelection(child.id)}
                                sx={{
                                  transform: `scale(${checkboxSize / 24})`,
                                  '& .MuiSvgIcon-root': {
                                    width: `${checkboxSize}px`,
                                    height: `${checkboxSize}px`,
                                  },
                                }}
                              />
                            </ListItemIcon>
                            <ListItemText primary={child.label} />
                          </ListItem>
                        ))}
                      </List>
                    </Collapse>
                  )}
                </React.Fragment>
              ))}
            </List>
          </List>
        </Popover>
      </div>
    </ThemeProvider>
  );
};

export default HierarchicalCheckboxDropdown;
