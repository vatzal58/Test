import React, { useState } from 'react';
import {
  Box,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Button,
  Grid,
  TextField,
  Select,
  MenuItem,
  InputLabel,
  FormControl,
  Chip,
  TableSortLabel,
  TablePagination,
} from '@mui/material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import * as XLSX from 'xlsx';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';

// Dynamic Columns Configuration for both Overview and Summary
const overviewColumns = [
  { id: 'label', label: 'Category', type: 'string', formatting: 'default' },
  { id: 'count', label: 'Total Count', type: 'number', formatting: 'number' },
  { id: 'value', label: 'Total Value', type: 'currency', formatting: 'currency' },
  { id: 'status', label: 'Overall Status', type: 'string', formatting: 'default' },
];

const summaryColumns = [
  { id: 'scenario', label: 'Scenarios', type: 'string', formatting: 'default' },
  { id: 'employeeName', label: 'Employee Name', type: 'string', formatting: 'default' },
  { id: 'attendeeName', label: 'Attendee Name/Firm Name', type: 'string', formatting: 'default' },
  { id: 'employee1', label: 'Employee1', type: 'string', formatting: 'default' },
  { id: 'successDate', label: 'Success Date', type: 'date', formatting: 'date' },
  { id: 'status', label: 'Status', type: 'string', formatting: 'default' },
];

// Sample Data with expanded overview data
const initialOverviewData = [
  {
    label: 'Gifts Received Over $100',
    count: 5,
    value: 750.00,
    status: 'Active'
  },
  {
    label: 'Gifts Given Over $100',
    count: 3,
    value: 450.00,
    status: 'Active'
  },
  {
    label: 'Entertainment Provided Over $300',
    count: 2,
    value: 850.00,
    status: 'Pending'
  },
];

// Rest of the components remain the same until Overview component

const Overview = ({ data, columns, onOverviewClick }) => {
  const [order, setOrder] = useState('asc');
  const [orderBy, setOrderBy] = useState('label');
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(5);

  const handleSort = (property) => {
    const isAsc = orderBy === property && order === 'asc';
    setOrder(isAsc ? 'desc' : 'asc');
    setOrderBy(property);
  };

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  const formatValue = (value, formatting) => {
    switch (formatting) {
      case 'currency':
        return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(value);
      case 'number':
        return new Intl.NumberFormat('en-US').format(value);
      case 'date':
        return new Date(value).toLocaleDateString();
      default:
        return value;
    }
  };

  const sortedData = data.sort((a, b) => {
    if (order === 'asc') {
      return a[orderBy] > b[orderBy] ? 1 : -1;
    } else {
      return a[orderBy] < b[orderBy] ? 1 : -1;
    }
  });

  const paginatedData = sortedData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);

  const exportToPDF = () => {
    const doc = new jsPDF();
    doc.text('Overview Report', 10, 10);
    doc.autoTable({
      head: [columns.map(col => col.label)],
      body: data.map(row => columns.map(col => formatValue(row[col.id], col.formatting))),
    });
    doc.save('overview.pdf');
  };

  const exportToExcel = () => {
    const ws = XLSX.utils.json_to_sheet(
      data.map(row => {
        const formattedRow = {};
        columns.forEach(col => {
          formattedRow[col.label] = formatValue(row[col.id], col.formatting);
        });
        return formattedRow;
      })
    );
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Overview');
    XLSX.writeFile(wb, 'overview.xlsx');
  };

  return (
    <Box mb={4}>
      <Typography variant="h6" gutterBottom>
        Overview
      </Typography>
      <Box mb={2}>
        <Button onClick={exportToExcel} variant="contained" sx={{ mr: 2 }}>
          Export to Excel
        </Button>
        <Button onClick={exportToPDF} variant="contained">
          Export to PDF
        </Button>
      </Box>
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              {columns.map((col) => (
                <TableCell key={col.id}>
                  <TableSortLabel
                    active={orderBy === col.id}
                    direction={orderBy === col.id ? order : 'asc'}
                    onClick={() => handleSort(col.id)}
                  >
                    {col.label}
                  </TableSortLabel>
                </TableCell>
              ))}
            </TableRow>
          </TableHead>
          <TableBody>
            {paginatedData.map((row, index) => (
              <TableRow key={index} hover onClick={() => onOverviewClick(row)}>
                {columns.map((col) => (
                  <TableCell key={col.id}>
                    {formatValue(row[col.id], col.formatting)}
                  </TableCell>
                ))}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
      <TablePagination
        rowsPerPageOptions={[5, 10, 25]}
        component="div"
        count={data.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={handleChangePage}
        onRowsPerPageChange={handleChangeRowsPerPage}
      />
    </Box>
  );
};

// Update the main component to use the new configuration
const GiftsAndEntertainmentManager = () => {
  const [filters, setFilters] = useState({
    scenarios: [],
    statuses: [],
    dateRange: { from: new Date('2024-07-28'), to: new Date('2025-01-28') },
    searchText: '',
  });
  const [overviewData, setOverviewData] = useState(initialOverviewData);
  const [summaryData, setSummaryData] = useState(initialSummaryData);

  const handleFilterChange = (newFilters) => {
    setFilters(newFilters);
    const filteredData = initialSummaryData.filter((row) => {
      const matchesScenario = newFilters.scenarios.length === 0 || newFilters.scenarios.includes(row.scenario);
      const matchesStatus = newFilters.statuses.length === 0 || newFilters.statuses.includes(row.status);
      return matchesScenario && matchesStatus;
    });
    setSummaryData(filteredData);
  };

  const handleOverviewClick = (item) => {
    const newSummaryData = initialSummaryData.filter((row) => row.scenario.includes(item.label));
    setSummaryData(newSummaryData);
  };

  return (
    <Box p={4}>
      <SearchCriteria onFilterChange={handleFilterChange} />
      <Overview 
        data={overviewData} 
        columns={overviewColumns} 
        onOverviewClick={handleOverviewClick} 
      />
      <Summary 
        data={summaryData} 
        columns={summaryColumns} 
      />
    </Box>
  );
};

export default GiftsAndEntertainmentManager;
